cmake_minimum_required(VERSION 2.8.7)
project(LinuxCute)

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%    Helper functions       %%%%%%%%%%%%%%%     START       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%     > to simplify reading and writing           %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#cmake_minimum_required(VERSION 3.0.2) # MINIMUM ?

include(CheckCXXCompilerFlag)
function(enable_cxx_compiler_flag_if_supported flag)
    string(FIND "${CMAKE_CXX_FLAGS}" "${flag}" flag_already_set)
    if(flag_already_set EQUAL -1)
        message(STATUS "Flag:      ${flag}")
        check_cxx_compiler_flag("${flag}" flag_supported)
        if(flag_supported)
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${flag}" PARENT_SCOPE)
        endif()
        unset(flag_supported CACHE)
    endif()
endfunction()

function(print_package_info package_name)
    set(NAME ${package_name})
    message(STATUS)
    message(STATUS "---------------------------------------------------------------")
    message(STATUS "---------------------------------------------------------------")
    message(STATUS "Printing info for... ${NAME}")
    message(STATUS "---------------------------------------------------------------")
    if(${NAME}_FOUND)
        message(STATUS "${NAME} Found!   (version          : ${${NAME}_VERSION})")
        message(STATUS "${NAME} directory                  : ${${NAME}_DIR}")
        message(STATUS "${NAME} definitions                : ${${NAME}_DEFINITIONS}")
        message(STATUS "${NAME} execution compile flags    : ${${NAME}_EXECUTABLE_COMPILE_FLAGS}")
        message(STATUS "${NAME} include dirs               : ${${NAME}_INCLUDE_DIRS}")
        message(STATUS "${NAME} includes                   : ${${NAME}_INCLUDES}")
        message(STATUS "${NAME} library dirs               : ${${NAME}_LIBRARY_DIRS}")
        message(STATUS "${NAME} libraries                  : ${${NAME}_LIBRARIES}")
    else()
        message(STATUS "${NAME} not Found...")
    endif()
    message(STATUS "---------------------------------------------------------------")
    message(STATUS "---------------------------------------------------------------")
    message(STATUS)
    unset(NAME)
endfunction()

function(print_platform_info)
    message(STATUS "---------------------------------------------------------------")
    message(STATUS "---------------------------------------------------------------")
    message(STATUS "Printing platform info: ")
    message(STATUS "---------------------------------------------------------------")
    message(STATUS "CMAKE_SYSTEM                         :  ${CMAKE_SYSTEM}")
    message(STATUS "CMAKE_SYSTEM_NAME                    :  ${CMAKE_SYSTEM_NAME}")
    message(STATUS "CMAKE_SYSTEM_VERSION                 :  ${CMAKE_SYSTEM_VERSION}")
    message(STATUS "CMAKE_SYSTEM_PROCESSOR               :  ${CMAKE_SYSTEM_PROCESSOR}")
    message(STATUS "CMAKE_HOST_SYSTEM_NAME               :  ${CMAKE_HOST_SYSTEM_NAME}")
    message(STATUS "CMAKE_CXX_COMPILER_ARCHITECTURE_ID   :  ${CMAKE_CXX_COMPILER_ARCHITECTURE_ID}")
    message(STATUS "---------------------------------------------------------------")
    message(STATUS "---------------------------------------------------------------")
endfunction()

function(print_option_wanted_status option_name)
    set(NAME ${option_name})
    message(STATUS "ASKED FOR OPTION : ${NAME} == ${${NAME}} (to enable, type -D${NAME}=1 after `cmake` cmd. ")
    unset(NAME)
endfunction()

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%    Helper functions       %%%%%%%%%%%%%%%     END       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#############################################################################################
###    General Settings    ##################################################################
#############################################################################################

# This tells CMake to use the <PackageName>_ROOT variables
# Otherwise, environment variable should be set
if (POLICY CMP0074)
  cmake_policy(SET CMP0074 NEW) # CMake 3.12
endif ()

# tell CMake to always include header files in this directory
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# Let's talk
set(CMAKE_VERBOSE_MAKEFILE ON)

print_platform_info()

#############################################################################################
###    Threads    ###########################################################################
#############################################################################################

SET(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)
print_package_info("Threads")

#############################################################################################
###    Boost       ##########################################################################
#############################################################################################

set(Boost_DETAILED_FAILURE_MSG OFF)
set(Boost_DEBUG OFF)

#######--->>>#add_compile_definitions(D_WIN32_WINNT=0x0A00 _WIN32_WINNT=0x0A00)
# The following functions help to search for the compiled boost lib.
# 
set(Boost_USE_STATIC_LIBS ON)
#set(Boost_USE_STATIC_RUNTIME ON)  

set(Boost_USE_MULTITHREADED ON)      
set(Boost_COMPILER "-vc141")        
set(Boost_ARCHITECTURE "-x64")

set(BOOST_ROOT "C:/Program Files/boost")
set(BOOST_LIBRARYDIR "C:/Program Files/boost/lib")
set(BOOST_INCLUDEDIR "C:/Program Files/boost/include/boost-1_67")

message(STATUS "For Boost installation on Windows that actually work with this CMake, see : https://gist.github.com/JBHarvey/e49348b03cf0898c929a107852c43e22")
find_package(
    Boost 
    COMPONENTS 
        regex
        thread
        system
        filesystem
        date_time
        signals 
    REQUIRED
)
print_package_info("Boost")

include_directories(${Boost_INCLUDE_DIRS})

# TODO: check if second find_package(Threads) really is necessary. It shouldn't
find_package(Threads)
print_package_info("Threads")

#############################################################################################
###    Qt       #############################################################################
#############################################################################################

# Instruct CMake to run moc automatically when needed
# moc generated files are located in the bin directory,
set(CMAKE_AUTOMOC ON)

# Create code from a list of Qt designer ui files
set(CMAKE_AUTOUIC ON)

# From --> https://doc.qt.io/qt-5/cmake-manual.html
set(OLD_CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH})
set(CMAKE_PREFIX_PATH "D:/Qt/5.12.2/msvc2017_64")
set(Qt5_DIR "D:/Qt/5.12.2/msvc2017_64/lib/cmake/Qt5")
set(Qt5Widgets_DIR "${Qt5_DIR}Widgets")
set(Qt5Gui_DIR "${Qt5_DIR}Gui")
set(Qt5Core_DIR "${Qt5_DIR}Core")
# From https://blog.kitware.com/cmake-finding-qt5-the-right-way/
find_package(
    Qt5 
    COMPONENTS
        Core
        Gui
        Widgets
    REQUIRED
)
print_package_info("Qt5")
print_package_info("Qt5Core")
print_package_info("Qt5Gui")
print_package_info("Qt5Widgets")
set(CMAKE_PREFIX_PATH ${OLD_CMAKE_PREFIX_PATH})

# Qt5Widgets_INCLUDES also includes header files for its dependencies (QtCore et QtGui)
include_directories(${Qt5Widgets_INCLUDES})

add_definitions(${Qt5Widgets_DEFINITIONS})

# Creation of executable fails in Qt5 with default configuration
SET(CMAKE_CXX_FLAGS "${Qt5Widgets_EXECUTABLE_COMPILE_FLAGS}")

#############################################################################################
###    Qwt      #############################################################################
#############################################################################################


file(GLOB QWT_ROOT_DIR "C:/Qwt-6.1.4")
file(GLOB QWT_INCLUDE_DIRS "${QWT_ROOT_DIR}/include")
file(GLOB QWT_LIBRARY_DIRS "${QWT_ROOT_DIR}/lib")
#  -DQT_WIDGETS_LIB is necessary when one uses QtWidgets in Qt5
#file(GLOB QWT_INCLUDE_DIRS "/usr/include/qwt")
include_directories(include ${QWT_INCLUDE_DIRS} )
include_directories(include "../AWLCoreClasses")
include_directories(include "../AWLQtScope")

#############################################################################################
###    CuteDemo    ##########################################################################
#############################################################################################

set(CUTEDEMO_MAIN_FILES "")
list(APPEND CUTEDEMO_MAIN_FILES 
        main.cpp
        awlqtdemo.cpp
        AWLSettings.cpp
        fov_2dscan.cpp
        awlplotscan.cpp
        TableView.cpp
)

set(CUTEDEMO_QT_UI_FILES "")
list(APPEND CUTEDEMO_QT_UI_FILES 
        awlqtdemo.ui
        fov_2dscan.ui
        TableView.ui
        awlplotscan.ui
)

set(CUTEDEMO_CORE_FILES "")
list(APPEND CUTEDEMO_CORE_FILES 
        ../AWLCoreClasses/awlcoord.cpp
        ../AWLCoreClasses/Publisher.cpp
        ../AWLCoreClasses/ReceiverPostProcessor.cpp
        ../AWLCoreClasses/CoordinateSystem.cpp
        ../AWLCoreClasses/ReceiverCANCapture.cpp
        ../AWLCoreClasses/ReceiverSimulatorCapture.cpp
        ../AWLCoreClasses/DebugPrintf.cpp
        ../AWLCoreClasses/ReceiverCapture.cpp
        ../AWLCoreClasses/Subscription.cpp
        ../AWLCoreClasses/DetectionStruct.cpp
        ../AWLCoreClasses/ThreadedWorker.cpp
        ../AWLCoreClasses/LoopedWorker.cpp
)

set(CUTEDEMO_SCOPE_FILES "")
list(APPEND CUTEDEMO_SCOPE_FILES 
        ../AWLQtScope/awlqtscope.cpp
        ../AWLQtScope/knob.cpp
        ../AWLQtScope/awlscopeplot.cpp
        ../AWLQtScope/signaldata.cpp
        ../AWLQtScope/curvedata.cpp
        ../AWLQtScope/wheelbox.cpp
        ../AWLQtScope/awlqtscope.ui
)

ADD_EXECUTABLE(LinuxCute WIN32 
   ${CUTEDEMO_MAIN_FILES}
   ${CUTEDEMO_QT_UI_FILES}
   ${CUTEDEMO_CORE_FILES}
   ${CUTEDEMO_SCOPE_FILES}
)

TARGET_COMPILE_DEFINITIONS(
        LinuxCute
        PUBLIC 
	    WINDOWS 
    )

#############################################################################################
###    Option description       #############################################################
#############################################################################################
# Set WANT_EASY_SYNC_SUPPORT to `1` to enable EasySync support
set(WANT_EASY_SYNC_SUPPORT 1)

# Set WANT_KVASER_SUPPORT to `1` to enable Kvaser support
set(WANT_KVASER_SUPPORT 0)

# Set WANT_SOCKET_CAN_SUPPORT to `1` to enable SocketCAN support WARNING Linux Only
set(WANT_SOCKET_CAN_SUPPORT 0)

# Set WANT_POSIX_UDP_SUPPORT to `1` to enable PosixUDP support WARNING Linux Only
set(WANT_POSIX_UDP_SUPPORT 0)

# Set WANT_POSIX_TTY_SUPPORT to `1` to enable PosixTTY support WARNING Linux Only
set(WANT_POSIX_TTY_SUPPORT 0)

# Set WANT_LIBUSB_SUPPORT to `1` to enable LibUSB support
set(WANT_LIBUSB_SUPPORT 1)

# Set WANT_TCP_SUPPORT to `1` to enable TCP_SUPPORT
set(WANT_TCP_SUPPORT 0)

# Set WANT_OPENCV_VIDEO true to enable OpenCV Video (and OpenCV in general)
set(WANT_OPENCV_VIDEO 0)

# Set WANT_AP_VIDEO to `1` to enable AP video
set(WANT_AP_VIDEO 0)

#############################################################################################
###    EasySync    ##########################################################################
#############################################################################################

print_option_wanted_status("WANT_EASY_SYNC_SUPPORT")
if(${WANT_EASY_SYNC_SUPPORT})
    TARGET_COMPILE_DEFINITIONS(
        LinuxCute
        PUBLIC 
            USE_CAN_EASYSYNC 
    )
    TARGET_SOURCES(
        LinuxCute
        PUBLIC 
            ../AWLCoreClasses/ReceiverEasySyncCapture.cpp 
    )
endif()

#############################################################################################
###    Kvaser (canlib)    ###################################################################
#############################################################################################

print_option_wanted_status("WANT_KVASER_SUPPORT")
if(${WANT_KVASER_SUPPORT})
    file(
        GLOB
        CAN_INCLUDE_DIR 
            "/usr/local/include/canlib"
    )
    file(
        GLOB
        CAN_LIBRARIES 
            "/usr/local/lib/libcan*"
    )
    include_directories(
        include
        ${CAN_INCLUDE_DIR}
    )


    TARGET_COMPILE_DEFINITIONS(
        LinuxCute
        PUBLIC 
            USE_CAN_KVASER 
    )

    TARGET_SOURCES(
        LinuxCute
        PUBLIC 
            ../AWLCoreClasses/ReceiverKvaserCapture.cpp 
    )

    TARGET_LINK_LIBRARIES(
        LinuxCute
        ${CAN_LIBRARIES}
    )
endif()

#############################################################################################
###    socket can    ########################################################################
#############################################################################################

print_option_wanted_status("WANT_SOCKET_CAN_SUPPORT")
if(${WANT_SOCKET_CAN_SUPPORT})
    TARGET_COMPILE_DEFINITIONS(
        LinuxCute
        PUBLIC 
            USE_CAN_SOCKETCAN 
    )
    TARGET_SOURCES(
        LinuxCute
        PUBLIC 
            ../AWLCoreClasses/ReceiverSocketCANCapture.cpp 
    )
endif()


#############################################################################################
###    POSIX UDP    #########################################################################
#############################################################################################

print_option_wanted_status("WANT_POSIX_UDP_SUPPORT")
if(${WANT_POSIX_UDP_SUPPORT})
    TARGET_COMPILE_DEFINITIONS(
        LinuxCute
        PUBLIC 
            USE_POSIXUDP 
    )
    TARGET_SOURCES(
        LinuxCute
        PUBLIC 
            ../AWLCoreClasses/ReceiverPosixUDPCapture.cpp 
    )
endif()


#############################################################################################
###    POSIX TTY    #########################################################################
#############################################################################################

print_option_wanted_status("WANT_POSIX_TTY_SUPPORT")
if(${WANT_POSIX_TTY_SUPPORT})
    TARGET_COMPILE_DEFINITIONS(
        LinuxCute
        PUBLIC 
            USE_POSIXTTY 
    )
    TARGET_SOURCES(
        LinuxCute
        PUBLIC 
            ../AWLCoreClasses/ReceiverPosixTTYCapture.cpp 
    )
endif()

#############################################################################################
###    libusb    ############################################################################
#############################################################################################

print_option_wanted_status("WANT_LIBUSB_SUPPORT")
if(${WANT_LIBUSB_SUPPORT})

    set(LIBUSB_ROOT "C:/libusb")
    set(LIBUSB_LIB "${LIBUSB_ROOT}/libusb-1.0.lib")
    set(LIBUSB_INCLUDE_DIRS "${LIBUSB_ROOT}/include")

    include_directories(${LIBUSB_INCLUDE_DIRS})

    TARGET_COMPILE_DEFINITIONS(
        LinuxCute
        PUBLIC 
            USE_LIBUSB 
    )
    TARGET_LINK_LIBRARIES( 
        LinuxCute 
        ${LIBUSB_LIB} 
    )
    TARGET_SOURCES(
        LinuxCute
        PUBLIC 
            ../AWLCoreClasses/ReceiverPolledCapture.cpp 
    )
    TARGET_SOURCES(
        LinuxCute
        PUBLIC 
            ../AWLCoreClasses/ReceiverLibUSBCapture.cpp 
    )
endif()

#############################################################################################
###    TCP    ###############################################################################
#############################################################################################

print_option_wanted_status("WANT_TCP_SUPPORT")
if(${WANT_TCP_SUPPORT})
    TARGET_COMPILE_DEFINITIONS(
        LinuxCute 
        PUBLIC 
            USE_TCP
    )
    TARGET_SOURCES(
        LinuxCute
        PUBLIC
            ../AWLCoreClasses/ReceiverTCPCapture.cp    
    )
endif()

#############################################################################################
###    OpenCV    ############################################################################
#############################################################################################

print_option_wanted_status("WANT_OPENCV_VIDEO")
if(${WANT_OPENCV_VIDEO})
    TARGET_COMPILE_DEFINITIONS(
        LinuxCute 
        PUBLIC 
            USE_OPENCV_VIDEO
    )
    FIND_PACKAGE(OpenCV REQUIRED)
    TARGET_SOURCES(
        LinuxCute 
        PUBLIC 
            VideoCapture.cpp 
            VideoViewer.cpp
    )
    TARGET_LINK_LIBRARIES(
        LinuxCute 
        ${OpenCV_LIBS}
    )
endif()

#############################################################################################
###    AP Video    ##########################################################################
#############################################################################################

print_option_wanted_status("WANT_AP_VIDEO")
if(${WANT_AP_VIDEO})
    TARGET_COMPILE_DEFINITIONS(
        LinuxCute 
        PUBLIC
            USE_AP_VIDEO 
    )
    file(GLOB
        AP_LIBRARIES 
        "../AP/lib/*"
    )
    TARGET_SOURCES( 
        LinuxCute 
        PUBLIC 
            APVideoCapture.cpp
            APVideoViewer.cpp 
    )
    TARGET_LINK_LIBRARIES(
        LinuxCute ${AP_LIBRARIES} 
    )

    INCLUDE_DIRECTORIES(../AP/include)
endif()

#############################################################################################
###    Final linking...    ##################################################################
#############################################################################################

TARGET_LINK_LIBRARIES(
    LinuxCute 
    ${Qt5Core_LIBRARIES}
    ${Qt5Gui_LIBRARIES}
    ${Qt5Widgets_LIBRARIES}
    ${Boost_LIBRARIES}
    ${QWT_LIBRARIES}
    #        ${Boost_DATE_TIME_LIBRARY}
    #        ${Boost_FILESYSTEM_LIBRARY}
    #        ${Boost_SIGNALS_LIBRARY}
    #        ${Boost_THREAD_LIBRARY}
    #        ${Boost_SYSTEM_LIBRARY}
)

target_link_libraries(LinuxCute Threads::Threads)
