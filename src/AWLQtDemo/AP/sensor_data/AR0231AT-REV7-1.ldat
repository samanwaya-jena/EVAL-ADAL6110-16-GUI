<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="sensor_desc.xsl"?>
<!--
****************************************************************************************************
*   If you are reading this, you are not taking advantage of the XML Stylesheet                    *
*                                                                                                  *
*   Instructions for viewing XML LDAT file can be found in:                                        *
*   C:\Aptina Imaging [Dev]\sensor_data\!DevWare XML-formatted SDAT User Guide.exe                 *
****************************************************************************************************
-->
<sensor name="AR0231AT" version="7" part_number="AR0231AT" version_name="REV7-1">
	<registers>
	<reg name="FRAME_COUNT2_">
		<long_desc>Counts the number of processed frames. At the startup is initialized to 0xFFFF. Upper bits, [31:16]</long_desc>
	</reg>
	<reg name="FRAME_COUNT_">
		<long_desc>Counts the number of processed frames. At the startup is initialized to 0xFFFF. Lower bits, [15:0]</long_desc>
	</reg>
	<reg name="OTPM_STATUS">
		<long_desc>See otpm documentation</long_desc>
		<bitfield name="OTPM_DONE">
			<long_desc>OTPM Read/Write Operation complete.</long_desc>
		</bitfield>
		<bitfield name="DED_PARITY_FAILURE">
			<long_desc>Double error-detect parity failure and data is bad.</long_desc>
		</bitfield>
		<bitfield name="OTPM_FULL">
			<long_desc>OTPM is full.</long_desc>
		</bitfield>
		<bitfield name="OTPM_INSUFFICIENT">
			<long_desc>Insufficient OTPM space to include a record.</long_desc>
		</bitfield>
		<bitfield name="OP_BUSY">
			<long_desc>True (1) when sequencer is idle and OTPM timing has completed.</long_desc>
		</bitfield>
		<bitfield name="SEC_CNT">
			<long_desc>Accumulation of Single Error Correction (SEC) errors for all reads (except invalidation). A SEC error is a single bit error that has been corrected by CRC code. SEC errors are non fatal and  provide some status as to the state of the OTPM device.  This register is reset at start of a command.</long_desc>
		</bitfield>
	</reg>
	<reg name="GPI_STATUS">
		<long_desc>Status of gpi and gpio pins</long_desc>
		<bitfield name="GPIO0_PIN_STATUS">
			<long_desc>This pin will reflect the state of the GPIO0 pin if the gpio0 input is not disabled in R0x340a.  It will show the value being input or output depending of the gpio0 output enable setting in R0x340a.</long_desc>
		</bitfield>
		<bitfield name="GPIO1_PIN_STATUS">
			<long_desc>This pin will reflect the state of the GPIO1 pin if the gpio1 input is not disabled in R0x340a.  It will show the value being input or output depending of the gpio1 output enable setting in R0x340a.</long_desc>
		</bitfield>
		<bitfield name="GPIO2_PIN_STATUS">
			<long_desc>This pin will reflect the state of the GPIO2 pin if the gpio2 input is not disabled in R0x340a.  It will show the value being input or output depending of the gpio2 output enable setting in R0x340a.</long_desc>
		</bitfield>
		<bitfield name="GPIO3_PIN_STATUS">
			<long_desc>This pin will reflect the state of the GPIO3 pin if the gpio3 input is not disabled in R0x340a.  It will show the value being input or output depending of the gpio3 output enable setting in R0x340a.</long_desc>
		</bitfield>
		<bitfield name="SADDR0_PIN_STATUS">
			<long_desc>This bit will reflect the state of the SADDR0 pin.</long_desc>
		</bitfield>
		<bitfield name="SADDR1_PIN_STATUS">
			<long_desc>This bit will reflect the state of the SADDR1 pin.</long_desc>
		</bitfield>
		<bitfield name="SADDR2_PIN_STATUS">
			<long_desc>This bit will reflect the state of the SADDR2 pin.</long_desc>
		</bitfield>
		<bitfield name="OUTPUT_ENABLE_N_PIN_STATUS">
			<long_desc>This bit will reflect the status of the output_enable_n pin function if R0x301a[8] is enabled and one of the GPIO pins is programmed for that function.</long_desc>
		</bitfield>
		<bitfield name="TRIGGER_PIN_STATUS">
			<long_desc>This bit will reflect the status of the trigger pin function if R0x301a[8] is enabled and one of the GPIO pins is programmed for that function.</long_desc>
		</bitfield>
		<bitfield name="STANDBY_PIN_STATUS">
			<long_desc>This bit will reflect the status of the standby pin function if R0x301a[8] is enabled and one of the GPIO pins is programmed for that function.</long_desc>
		</bitfield>
	</reg>
	<reg name="FRAME_STATUS">
		<long_desc>Contains the bitfields associated with frame status</long_desc>
		<bitfield name="FRAME_STATUS_FRAMESYNC">
			<long_desc>Set on register write and reset on frame synchronization. Acts as debug flag to verify that register writes completed before last frame synchronization.</long_desc>
		</bitfield>
		<bitfield name="FRAME_STATUS_STANDBY">
			<long_desc>This bit indicates that  the sensor is in standby state. It can be polled after standby is entered to see when the real low-power state is entered; which can happen at the end of row or frame depending on bit R0x301A[4].</long_desc>
		</bitfield>
		<bitfield name="FRAME_STATUS_FRAME_START_DURING_GPH">
			<long_desc>Signifies that a new frame has started while group parameter hold is high. This tells the user if the sensor frame-sync start event has been missed, and therefore gains/integration time changes are going to take effect delayed by 1 frame.</long_desc>
		</bitfield>
		<bitfield name="FRAME_STATUS_PLL_LOCKED">
			<long_desc>This bit indicates that  the sensor is in streaming state and the PLL is locked. The sensor is now ready to output frames.</long_desc>
		</bitfield>
	</reg>
	<reg name="DATAPATH_STATUS">
		<long_desc>Contains the bitfields associated with datapath status</long_desc>
	</reg>
	<reg name="FLASH_STATUS">
		<long_desc>Status of FLASH output.</long_desc>
		<bitfield name="XENON_SEQ_ON">
			<long_desc>Indicates that the xenon FLASH sequence is enabled for the current frame.</long_desc>
		</bitfield>
		<bitfield name="FLASH_TRIGGERED">
			<long_desc>Indicates that the FLASH output signal was asserted for the current frame.</long_desc>
		</bitfield>
		<bitfield name="FLASH_OUTPUT_STATUS">
			<long_desc>Reflects the current state of the FLASH output signal.</long_desc>
		</bitfield>
	</reg>
	<reg name="OTPM_STATUS2">
		<long_desc>See otpm documentation</long_desc>
		<bitfield name="OTPM_CONTROL_AUTO_WR_END">
			<long_desc>Indicates whether the automatic write sequence is finished.</long_desc>
		</bitfield>
		<bitfield name="OTPM_CONTROL_AUTO_WR_SUCCESS">
			<long_desc>Indicates whether the automatic write sequence was successful.</long_desc>
		</bitfield>
		<bitfield name="OTPM_CONTROL_AUTO_RD_END">
			<long_desc>Indicates whether the automatic read sequence is finished.</long_desc>
		</bitfield>
		<bitfield name="OTPM_CONTROL_AUTO_RD_SUCCESS">
			<long_desc>Indicates whether the automatic read sequence was successful.</long_desc>
		</bitfield>
		<bitfield name="OTPM_MANUAL_SINGLE_WR_END">
			<long_desc>Indicates whether the single write sequence is finished.</long_desc>
		</bitfield>
		<bitfield name="OTPM_MANUAL_SINGLE_WR_SUCCESS">
			<long_desc>Indicates whether the single write sequence was successful.</long_desc>
		</bitfield>
		<bitfield name="OTPM_MANUAL_SINGLE_RD_END">
			<long_desc>Indicates whether the single read sequence is finished.</long_desc>
		</bitfield>
		<bitfield name="OTPM_SINGLE_RD_SUCCESS">
			<long_desc>Indicates whether the single read sequence was successful.</long_desc>
		</bitfield>
		<bitfield name="OTPM_PON_VAA_1V8_1V2">
			<long_desc>Indicates if 1v2 power is available</long_desc>
		</bitfield>
	</reg>
	<reg name="EXPOSURE_T1_ROW">
		<long_desc>T1 exposure in number of rows. It does not include sub-row time.</long_desc>
	</reg>
	<reg name="EXPOSURE_T2_ROW">
		<long_desc>T2 exposure in number of rows. It does not include sub-row time.</long_desc>
	</reg>
	<reg name="EXPOSURE_T3_ROW">
		<long_desc>T3 exposure in number of rows. It does not include sub-row time.</long_desc>
	</reg>
	<reg name="EXPOSURE_T4_ROW">
		<long_desc>T4 exposure in number of rows. It does not include sub-row time.</long_desc>
	</reg>
	<reg name="EXPOSURE_T1_CLK_U">
		<long_desc>T1 exposure in number of pixel clocks upper bits.</long_desc>
	</reg>
	<reg name="EXPOSURE_T1_CLK_L">
		<long_desc>T1 exposure in number of pixel clocks lower bits.</long_desc>
	</reg>
	<reg name="EXPOSURE_T2_CLK_U">
		<long_desc>T2 exposure in number of pixel clocks upper bits.</long_desc>
	</reg>
	<reg name="EXPOSURE_T2_CLK_L">
		<long_desc>T2 exposure in number of pixel clocks lower bits.</long_desc>
	</reg>
	<reg name="EXPOSURE_T3_CLK_U">
		<long_desc>T3 exposure in number of pixel clocks upper bits.</long_desc>
	</reg>
	<reg name="EXPOSURE_T3_CLK_L">
		<long_desc>T3 exposure in number of pixel clocks lower bits.</long_desc>
	</reg>
	<reg name="EXPOSURE_T4_CLK_U">
		<long_desc>T4 exposure in number of pixel clocks upper bits.</long_desc>
	</reg>
	<reg name="EXPOSURE_T4_CLK_L">
		<long_desc>T4 exposure in number of pixel clocks lower bits.</long_desc>
	</reg>
	<reg name="FINE_INTEGRATION_ACTUAL_T1">
		<long_desc>T1 sub-row time in pixel clocks.</long_desc>
	</reg>
	<reg name="FINE_INTEGRATION_ACTUAL_T2">
		<long_desc>T2 sub-row time in pixel clocks.</long_desc>
	</reg>
	<reg name="FINE_INTEGRATION_ACTUAL_T3">
		<long_desc>T3 sub-row time in pixel clocks.</long_desc>
	</reg>
	<reg name="FINE_INTEGRATION_ACTUAL_T4">
		<long_desc>T4 sub-row time in pixel clocks.</long_desc>
	</reg>
	<reg name="RATIO_ACTUAL_T1_T2">
		<long_desc>Actual T1 to T2 exposure ratio. It is in NNNNNNN.MMMMM format.</long_desc>
	</reg>
	<reg name="RATIO_ACTUAL_T2_T3">
		<long_desc>Actual T2 to T3 exposure ratio. It is in NNNNNNN.MMMMM format.</long_desc>
	</reg>
	<reg name="RATIO_ACTUAL_T3_T4">
		<long_desc>Actual T3 to T4 exposure ratio. It is in NNNNNNN.MMMMM format.</long_desc>
	</reg>
	<reg name="RATIO_ACTUAL_T2_T1">
		<long_desc>Actual T2 to T1 exposure ratio. It is in NNNNNN.MMMMMMMMMM format.</long_desc>
	</reg>
	<reg name="RATIO_ACTUAL_T1_T3_MSB">
		<long_desc>MSB of 17-bit value for actual T1 to T3 exposure ratio. It is in NNNNNNNNNNN.MMMMM format.</long_desc>
	</reg>
	<reg name="RATIO_ACTUAL_T1_T3">
		<long_desc>Actual T1 to T3 exposure ratio. It is in NNNNNNNNNNN.MMMMM format.</long_desc>
	</reg>
	<reg name="RATIO_ACTUAL_T1_T4_MSB">
		<long_desc>MSB of 17-bit value for actual T1 to T4 exposure ratio. It is in NNNNNNNNNNN.MMMMM format.</long_desc>
	</reg>
	<reg name="RATIO_ACTUAL_T1_T4">
		<long_desc>Actual T1 to T4 exposure ratio. It is in NNNNNNNNNNN.MMMMM format.</long_desc>
	</reg>
	<reg name="RATIO_ACTUAL_GAIN1">
		<long_desc>Actual Gain 1 Exposure Ratio. It is in NNNNNNN.MMMMM format. 2 exposure mode: (T1+T2)/T2 3 exposure mode: (T1+T2+T3)/(T2+T3) 4 exposure mode: (T1+T2+T3+T4)/(T2+T3+T4)</long_desc>
	</reg>
	<reg name="RATIO_ACTUAL_GAIN2_MSB">
		<long_desc>MSB of 17-bit value for actual Gain 2 Exposure Ratio. It is in NNNNNNNNNNNN.MMMMM format. 3 exposure mode: (T1+T2+T3)/(T3) 4 exposure mode: (T1+T2+T3+T4)/(T3+T4)</long_desc>
	</reg>
	<reg name="RATIO_ACTUAL_GAIN2">
		<long_desc>Actual Gain 2 Exposure Ratio. It is in NNNNNNNNNNNN.MMMMM format. 3 exposure mode: (T1+T2+T3)/(T3) 4 exposure mode: (T1+T2+T3+T4)/(T3+T4)</long_desc>
	</reg>
	<reg name="RATIO_ACTUAL_GAIN3_MSB">
		<long_desc>MSB of 17-bit value for actual Gain 3 Exposure Ratio. It is in NNNNNNNNNNNN.MMMMM format. 4 exposure mode: (T1+T2+T3+T4)/T4</long_desc>
	</reg>
	<reg name="RATIO_ACTUAL_GAIN3">
		<long_desc>Actual Gain 3 Exposure Ratio. It is in NNNNNNNNNNNN.MMMMM format. 4 exposure mode: (T1+T2+T3+T4)/T4</long_desc>
	</reg>
	<reg name="DATA_FORMAT_ACTUAL">
		<long_desc>Illegal values written to data_format_bits may be altered before use.  The value actually used is reported here.</long_desc>
	</reg>
	<reg name="ASIL_STATUS_00">
		<long_desc>asil_status_00</long_desc>
		<bitfield name="ASIL_STATUS_EXT_CLK_PARAM">
			<long_desc>asil status on ext_clk per frame</long_desc>
		</bitfield>
		<bitfield name="ASIL_STATUS_CLK_PIX_PARAM">
			<long_desc>asil status on clk_pix per frame</long_desc>
		</bitfield>
		<bitfield name="ASIL_STATUS_CLK_OP_PARAM">
			<long_desc>asil status on clk_op per frame</long_desc>
		</bitfield>
		<bitfield name="ASIL_STATUS_CLK_REG_PARAM">
			<long_desc>asil status on clk_reg per frame</long_desc>
		</bitfield>
		<bitfield name="ASIL_STATUS_CLK_PIX_100_PARAM">
			<long_desc>asil status on clk_pix for 100 ext_clk</long_desc>
		</bitfield>
		<bitfield name="ASIL_STATUS_CLK_OP_100_PARAM">
			<long_desc>asil status on clk_op for 100 ext_clk</long_desc>
		</bitfield>
		<bitfield name="ASIL_STATUS_CLK_REG_100_PARAM">
			<long_desc>asil status on clk_reg for 100 ext_clk</long_desc>
		</bitfield>
	</reg>
	<reg name="ASIL_STATUS_01">
		<long_desc>Each bit of this register is automatically set if a corresponding check enable bit is set and the corresponding check fails during a frame time.  Bits 0-12 map to the same checks as asil_check_enables_01. The bit names are fail_checkname instead of check_checkname.</long_desc>
		<bitfield name="FAIL_CRT">
			<long_desc>Failure of column rom test.</long_desc>
		</bitfield>
		<bitfield name="FAIL_MT1">
			<long_desc>Failure of column memory test 1.</long_desc>
		</bitfield>
		<bitfield name="FAIL_MT2">
			<long_desc>Failure of column memory test 2.</long_desc>
		</bitfield>
		<bitfield name="FAIL_OT1_PIXEL_LOW">
			<long_desc>Failure of pixel overdrive test 1, pixel is too low.</long_desc>
		</bitfield>
		<bitfield name="FAIL_OT1_PIXEL_HIGH">
			<long_desc>Failure of pixel overdrive test1, pixel is too high.</long_desc>
		</bitfield>
		<bitfield name="FAIL_OT2_PIXEL_LOW">
			<long_desc>Failure of pixel overdrive test 2, pixel is too low.</long_desc>
		</bitfield>
		<bitfield name="FAIL_OT2_PIXEL_HIGH">
			<long_desc>Failure of pixel overdrive test2, pixel is too high.</long_desc>
		</bitfield>
		<bitfield name="FAIL_ZEBRA_AB_PIXEL_LEGAL">
			<long_desc>Failure of zebra AB test, pixel is indeterminate.</long_desc>
		</bitfield>
		<bitfield name="FAIL_ZEBRA_AB_PIXEL_CORRECT">
			<long_desc>Failure of zebra AB test, pixel had an incorrect bright or dark value.</long_desc>
		</bitfield>
		<bitfield name="FAIL_ZEBRA_BA_PIXEL_LEGAL">
			<long_desc>Failure of zebra BA test, pixel is indeterminate.</long_desc>
		</bitfield>
		<bitfield name="FAIL_ZEBRA_BA_PIXEL_CORRECT">
			<long_desc>Failure of zebra BA test, pixel had an incorrect bright or dark value.</long_desc>
		</bitfield>
		<bitfield name="FAIL_PT1_BELOW_THRESHOLD">
			<long_desc>Failure of pixout test 1, pixel was below threshold.</long_desc>
		</bitfield>
		<bitfield name="FAIL_PT2_ABOVE_THRESHOLD">
			<long_desc>Failure of pixout test 2, pixel was above threshold.</long_desc>
		</bitfield>
		<bitfield name="FAIL_RRC_PIXEL_LEGAL">
			<long_desc>Failure of row rom columns.  Pixel was indeterminate.</long_desc>
		</bitfield>
		<bitfield name="FAIL_RRC_ADDRESS">
			<long_desc>Failure of row rom columns, address value.</long_desc>
		</bitfield>
	</reg>
	<reg name="ASIL_STATUS_02">
		<long_desc>Reports the ASIL status of several checks.</long_desc>
		<bitfield name="EMBEDDED_CRC_STATUS">
			<long_desc>Reports the ASIL SYSCHK status of embedded CRC</long_desc>
		</bitfield>
		<bitfield name="DBLC_RAM_ECC_DED_STATUS">
			<long_desc>Reports the ASIL status of the dblc ram ecc double error detect.</long_desc>
		</bitfield>
		<bitfield name="DBLC_RAM_ECC_SEC_STATUS">
			<long_desc>Reports the ASIL status of the dblc ram ecc single error correct.</long_desc>
		</bitfield>
		<bitfield name="TPG_RAM_ECC_SEC">
			<long_desc>Reserved.</long_desc>
		</bitfield>
		<bitfield name="TPG_RAM_ECC_DED">
			<long_desc>Reserved.</long_desc>
		</bitfield>
		<bitfield name="SEQUENCER_ECC_STATUS">
			<long_desc>Reports the ASIL status of the sequencer ECC</long_desc>
		</bitfield>
		<bitfield name="DTR_CRC_STATUS">
			<long_desc>Reports the ASIL SYSCHK status of image DTR region CRC</long_desc>
		</bitfield>
		<bitfield name="ROW_FRAME_CRC_STATUS">
			<long_desc>Reports the ASIL SYSCHK status of image FRAME or ROW CRC</long_desc>
		</bitfield>
	</reg>
	<reg name="ASIL_STATUS_03">
		<long_desc>Collection of asil status flags 3</long_desc>
		<bitfield name="DELAY_BUFFER_CRC_FAULT">
			<long_desc>Indicates a data or write/read pointer CRC fault has occurred in the delay buffer memories.  CRC fault bit can be set or cleared.</long_desc>
		</bitfield>
	</reg>
	<reg name="ASIL_STARTUP_STATUS_00">
		<long_desc>Collection of asil startup status flags.</long_desc>
		<bitfield name="SYS_CHECK_M3ROM">
			<long_desc>M3ROM scan sys check status</long_desc>
		</bitfield>
		<bitfield name="SYS_CHECK_OTPM">
			<long_desc>OTPM cache scan sys check status</long_desc>
		</bitfield>
		<bitfield name="SYS_CHECK_IREG">
			<long_desc>Register scan sys check status</long_desc>
		</bitfield>
		<bitfield name="SYS_CHECK_PDIM">
			<long_desc>PDI cache scan sys check status</long_desc>
		</bitfield>
	</reg>
	<reg name="ATR_CHECK_CRT_CRC_VALUE">
		<long_desc>Value from CRC calculation from column ROM addresses.</long_desc>
	</reg>
	<reg name="RRC_CHECK_ADDR_CRC_VALUE">
		<long_desc>Value from CRC calculation from row ROM addresses.</long_desc>
	</reg>
	<reg name="DELAY_BUFFER_CRC_FAULTS_PER_FRAME">
		<long_desc>Number of delay buffer memories CRC faults per frame.  CRC fault count can be set or cleared.</long_desc>
	</reg>
	<reg name="DELAY_BUFFER_CRC_FAULT_FRAMES">
		<long_desc>Number of frames with delay buffer memories CRC faults.  CRC fault count can be set or cleared.</long_desc>
	</reg>
	<reg name="FUSE_PIXEL_DEFECT_COUNT">
		<long_desc>Number of defect pixels processed from the PDI cache.</long_desc>
	</reg>
	<reg name="FINE_INT_ERR">
		<long_desc>fine_int_err</long_desc>
		<bitfield name="FINE_OVLP_ERR">
			<long_desc>This bit is set when shutter exposure 1 overlaps with other exposure shutters. Writing a 1 to this bit will clear the error flag.</long_desc>
		</bitfield>
		<bitfield name="FINE2_OVLP_ERR">
			<long_desc>This bit is set when shutter exposure 2 overlaps with other exposure shutters or when shutter 2 occurs before readout of exposure 1 is done in a row time, when t2_sh_advance_dis=0 and t2_sh_advance is non-zero. Writing a 1 to this bit will clear the error flag.</long_desc>
		</bitfield>
		<bitfield name="FINE3_OVLP_ERR">
			<long_desc>This bit is set when shutter exposure 3 overlaps with other exposure shutters or when shutter 3 occurs before readout of exposure 2 is done in a row time, when t3_sh_advance_dis=0 and t3_sh_advance is non-zero. Writing a 1 to this bit will clear the error flag.</long_desc>
		</bitfield>
		<bitfield name="FINE4_OVLP_ERR">
			<long_desc>This bit is set when shutter exposure 4 overlaps with other exposure shutters or when shutter 4 occurs before readout of exposure 3 is done in a row time, when t4_sh_advance_dis=0 and t4_sh_advance is non-zero. Writing a 1 to this bit will clear the error flag.</long_desc>
		</bitfield>
		<bitfield name="FINE_LIMIT_ERR">
			<long_desc>This bit is set when fine integration time is set outside its legal limits. Writing a 1 to this bit will clear the error flag.</long_desc>
		</bitfield>
		<bitfield name="FINE2_LIMIT_ERR">
			<long_desc>This bit is set when fine integration time 2 is set outside its legal limits. Writing a 1 to this bit will clear the error flag.</long_desc>
		</bitfield>
		<bitfield name="FINE3_LIMIT_ERR">
			<long_desc>This bit is set when fine integration time 3 is set outside its legal limits. Writing a 1 to this bit will clear the error flag.</long_desc>
		</bitfield>
		<bitfield name="FINE4_LIMIT_ERR">
			<long_desc>This bit is set when fine integration time 4 is set outside its legal limits. Writing a 1 to this bit will clear the error flag.</long_desc>
		</bitfield>
		<bitfield name="FINE_SAMP_ERR">
			<long_desc>This bit is set when shutter exposure 1 addressing overlaps with sampling addressing. Writing a 1 to this bit will clear the error flag.</long_desc>
		</bitfield>
		<bitfield name="FINE2_SAMP_ERR">
			<long_desc>This bit is set when shutter exposure 2 addressing overlaps with sampling addressing. Writing a 1 to this bit will clear the error flag.</long_desc>
		</bitfield>
		<bitfield name="FINE3_SAMP_ERR">
			<long_desc>This bit is set when shutter exposure 3 addressing overlaps with sampling addressing. Writing a 1 to this bit will clear the error flag.</long_desc>
		</bitfield>
		<bitfield name="FINE4_SAMP_ERR">
			<long_desc>This bit is set when shutter exposure 4 addressing overlaps with sampling addressing. Writing a 1 to this bit will clear the error flag.</long_desc>
		</bitfield>
		<bitfield name="FINE_PIN_EN">
			<long_desc>Setting this bit enable any of the shutter exposure 1 errors to cause the SYS_CHECK pin to high.</long_desc>
		</bitfield>
		<bitfield name="FINE2_PIN_EN">
			<long_desc>Setting this bit enable any of the shutter exposure 2 errors to cause the SYS_CHECK pin to high.</long_desc>
		</bitfield>
		<bitfield name="FINE3_PIN_EN">
			<long_desc>Setting this bit enable any of the shutter exposure 3 errors to cause the SYS_CHECK pin to high.</long_desc>
		</bitfield>
		<bitfield name="FINE4_PIN_EN">
			<long_desc>Setting this bit enable any of the shutter exposure 4 errors to cause the SYS_CHECK pin to high.</long_desc>
		</bitfield>
	</reg>
	<reg name="ASIL_EXT_CLK_COUNT_MSB">
		<long_desc>ext_clk count per frame(msb)</long_desc>
	</reg>
	<reg name="ASIL_EXT_CLK_COUNT_LSB">
		<long_desc>ext_clk count per frame(lsb)</long_desc>
	</reg>
	<reg name="ASIL_CLK_PIX_COUNT_MSB">
		<long_desc>Clk_pix count per frame(msb)</long_desc>
	</reg>
	<reg name="ASIL_CLK_PIX_COUNT_LSB">
		<long_desc>Clk_pix count per frame(lsb)</long_desc>
	</reg>
	<reg name="ASIL_CLK_OP_COUNT_MSB">
		<long_desc>Clk_op count per frame(msb)</long_desc>
	</reg>
	<reg name="ASIL_CLK_OP_COUNT_LSB">
		<long_desc>Clk_op count per frame(lsb)</long_desc>
	</reg>
	<reg name="ASIL_CLK_REG_COUNT_MSB">
		<long_desc>Clk_reg counte per frame(msb)</long_desc>
	</reg>
	<reg name="ASIL_CLK_REG_COUNT_LSB">
		<long_desc>Clk_reg counte per frame(lsb)</long_desc>
	</reg>
	<reg name="ASIL_CLK_PIX_COUNT_100_EXT">
		<long_desc>Clk_pix count for 100 ext_clk cycles</long_desc>
	</reg>
	<reg name="ASIL_CLK_OP_COUNT_100_EXT">
		<long_desc>Clk_op count for 100 ext_clk cycles</long_desc>
	</reg>
	<reg name="ASIL_CLK_REG_COUNT_100_EXT">
		<long_desc>Clk_reg count for 100 ext_clk cycles</long_desc>
	</reg>
	<reg name="TEMPSENS0_DATA_REG">
		<long_desc>Output value from top temperature sensor.</long_desc>
	</reg>
	<reg name="TEMPSENS1_DATA_REG">
		<long_desc>Output value from top temperature sensor.</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_0">
		<long_desc>uncalibrated voltage code for b_bgap</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_1">
		<long_desc>uncalibrated voltage code for b_rst_hi_1</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_2">
		<long_desc>uncalibrated voltage code for b_rst_hi_2</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_3">
		<long_desc>uncalibrated voltage code for b_rst_hi_3</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_4">
		<long_desc>uncalibrated voltage code for b_dcg_hi_1</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_5">
		<long_desc>uncalibrated voltage code for b_dcg_hi_2</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_6">
		<long_desc>uncalibrated voltage code for b_tx_hi_1</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_7">
		<long_desc>uncalibrated voltage code for b_tx_hi_2</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_8">
		<long_desc>uncalibrated voltage code for b_tx_hi_3</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_9">
		<long_desc>uncalibrated voltage code for b_row_hi</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_10">
		<long_desc>uncalibrated voltage code for b_ab_hi</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_11">
		<long_desc>uncalibrated voltage code for b_lfm_hi</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_12">
		<long_desc>uncalibrated voltage code for b_rst_lo</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_13">
		<long_desc>uncalibrated voltage code for b_ab_drain_1</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_14">
		<long_desc>uncalibrated voltage code for b_ab_drain_2</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_15">
		<long_desc>uncalibrated voltage code for b_tx_lo_1</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_16">
		<long_desc>uncalibrated voltage code for b_tx_lo_2</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_17">
		<long_desc>uncalibrated voltage code for b_tx_lo_3</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_18">
		<long_desc>uncalibrated voltage code for b_ab_lo_1</long_desc>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_19">
		<long_desc>uncalibrated voltage code for b_ab_lo_2</long_desc>
	</reg>
	<reg name="TEMPVSENS0_VMON_MEAS_0">
		<long_desc>uncalibrated voltage code for top vaa</long_desc>
	</reg>
	<reg name="TEMPVSENS0_VMON_MEAS_1">
		<long_desc>uncalibrated voltage code for top vaapix</long_desc>
	</reg>
	<reg name="TEMPVSENS0_VMON_MEAS_2">
		<long_desc>uncalibrated voltage code for top vdd</long_desc>
	</reg>
	<reg name="TEMPVSENS0_VMON_MEAS_3">
		<long_desc>uncalibrated voltage code for top vddio</long_desc>
	</reg>
	<reg name="TEMPVSENS0_VMON_MEAS_4">
		<long_desc>uncalibrated voltage code for top mon1v8</long_desc>
	</reg>
	<reg name="TEMPVSENS0_VMON_MEAS_5">
		<long_desc>uncalibrated voltage code for top mon1v2</long_desc>
	</reg>
	<reg name="TEMPVSENS0_VMON_MEAS_6">
		<long_desc>uncalibrated voltage code for top vtest_in_1</long_desc>
	</reg>
	<reg name="TEMPVSENS0_STATUS">
		<long_desc>tempvsens0_status</long_desc>
		<bitfield name="TEMPVSENS0_YELLOW_FLAG_GATED">
			<long_desc>tempvsens0_yellow_flag_gated</long_desc>
		</bitfield>
		<bitfield name="TEMPVSENS0_RED_FLAG_GATED">
			<long_desc>tempvsens0_red_flag_gated</long_desc>
		</bitfield>
		<bitfield name="TEMPVSENS0_YELLOW_FLAG">
			<long_desc>tempvsens0_yellow_flag</long_desc>
		</bitfield>
		<bitfield name="TEMPVSENS0_RED_FLAG">
			<long_desc>tempvsens0_red_flag</long_desc>
		</bitfield>
		<bitfield name="TEMPVSENS0_ERROR_COUNT">
			<long_desc>tempvsens0_error_count</long_desc>
		</bitfield>
		<bitfield name="TEMPVSENS0_ERROR_ADDR">
			<long_desc>tempvsens0_error_addr</long_desc>
		</bitfield>
		<bitfield name="TEMPVSENS0_ERROR_MODE">
			<long_desc>tempvsens0_error_mode</long_desc>
		</bitfield>
	</reg>
	<reg name="TEMPVSENS1_VMON_MEAS_0">
		<long_desc>uncalibrated voltage code for btm vaa</long_desc>
	</reg>
	<reg name="TEMPVSENS1_VMON_MEAS_1">
		<long_desc>uncalibrated voltage code for btm vaapix</long_desc>
	</reg>
	<reg name="TEMPVSENS1_VMON_MEAS_2">
		<long_desc>uncalibrated voltage code for btm vdd</long_desc>
	</reg>
	<reg name="TEMPVSENS1_VMON_MEAS_3">
		<long_desc>uncalibrated voltage code for btm vddio</long_desc>
	</reg>
	<reg name="TEMPVSENS1_VMON_MEAS_4">
		<long_desc>uncalibrated voltage code for btm mon2v8</long_desc>
	</reg>
	<reg name="TEMPVSENS1_VMON_MEAS_5">
		<long_desc>uncalibrated voltage code for btm mon1v8</long_desc>
	</reg>
	<reg name="TEMPVSENS1_VMON_MEAS_6">
		<long_desc>uncalibrated voltage code for btm mon1v2</long_desc>
	</reg>
	<reg name="TEMPVSENS1_STATUS">
		<long_desc>tempvsens1_status</long_desc>
		<bitfield name="TEMPVSENS1_YELLOW_FLAG_GATED">
			<long_desc>tempvsens1_yellow_flag_gated</long_desc>
		</bitfield>
		<bitfield name="TEMPVSENS1_RED_FLAG_GATED">
			<long_desc>tempvsens1_red_flag_gated</long_desc>
		</bitfield>
		<bitfield name="TEMPVSENS1_YELLOW_FLAG">
			<long_desc>tempvsens1_yellow_flag</long_desc>
		</bitfield>
		<bitfield name="TEMPVSENS1_RED_FLAG">
			<long_desc>tempvsens1_red_flag</long_desc>
		</bitfield>
		<bitfield name="TEMPVSENS1_ERROR_COUNT">
			<long_desc>tempvsens1_error_count</long_desc>
		</bitfield>
		<bitfield name="TEMPVSENS1_ERROR_ADDR">
			<long_desc>tempvsens1_error_addr</long_desc>
		</bitfield>
		<bitfield name="TEMPVSENS1_ERROR_MODE">
			<long_desc>tempvsens1_error_mode</long_desc>
		</bitfield>
	</reg>
	<reg name="TEMPVSENS0_BOOST_MEAS_20">
		<long_desc>uncalibrated voltage code</long_desc>
	</reg>
	<reg name="AE_MEAN_H">
		<long_desc>ROI-1: Return the true mean of all pixels of selected color (Higher bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_MEAN_L">
		<long_desc>ROI-1: Return the true mean of all pixels of selected color (Lower bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_HIST_BEGIN_H">
		<long_desc>ROI-1: Code value corresponding to the histogram bin below which(hist_begin_perc*100)% of pixels exist (higher bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_HIST_BEGIN_L">
		<long_desc>ROI-1: Code value corresponding to the histogram bin below which(hist_begin_perc*100)% of pixels exist (lower bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_HIST_END_H">
		<long_desc>ROI-1: Code value corresponding to the histogram bin below which(hist_end_perc*100)% of pixels exist  (higher bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_HIST_END_L">
		<long_desc>ROI-1: Code value corresponding to the histogram bin below which(hist_end_perc*100)% of pixels exist  (lower 16 bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_LOW_END_MEAN_H">
		<long_desc>ROI-1: The true mean of all pixels of selected color in the ROI that fall into the low end of the histogram (where low end is defined by hist_div).  (higher bits) The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_LOW_END_MEAN_L">
		<long_desc>ROI-1: The true mean of all pixels of selected color in the ROI that fall into the low end of the histogram (where low end is defined by hist_div).  (lower 16 bits) The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_PERC_LOW_END">
		<long_desc>ROI-1: Percentage of pixels of selected color in ROI that fall into the low end of the histogram. Specified as a number &lt; 1 = 0.xx...xxx The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_NORM_ABS_DEV">
		<long_desc>ROI-1: Percentage of pixels of selected color in ROI that fall into the low end of the histogram. Specified as a number &lt; 1 = 0.xx...xxx The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_MEAN2_H">
		<long_desc>ROI-2: Return the true mean of all pixels of selected color (Higher bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_MEAN2_L">
		<long_desc>ROI-2: Return the true mean of all pixels of selected color (Lower bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_HIST2_BEGIN_H">
		<long_desc>ROI-2: Code value corresponding to the histogram bin below which(hist_begin_perc*100)% of pixels exist (higher bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_HIST2_BEGIN_L">
		<long_desc>ROI-2: Code value corresponding to the histogram bin below which(hist_begin_perc*100)% of pixels exist (lower bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_HIST2_END_H">
		<long_desc>ROI-2: Code value corresponding to the histogram bin below which(hist_end_perc*100)% of pixels exist  (higher bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_HIST2_END_L">
		<long_desc>ROI-2: Code value corresponding to the histogram bin below which(hist_end_perc*100)% of pixels exist  (lower 16 bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_LOW2_END_MEAN_H">
		<long_desc>ROI-2: The true mean of all pixels of selected color in the ROI that fall into the low end of the histogram (where low end is defined by hist_div).  (higher bits) The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_LOW2_END_MEAN_L">
		<long_desc>ROI-2: The true mean of all pixels of selected color in the ROI that fall into the low end of the histogram (where low end is defined by hist_div).  (lower 16 bits) The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_PERC2_LOW_END">
		<long_desc>ROI-2: Percentage of pixels of selected color in ROI that fall into the low end of the histogram. Specified as a number &lt; 1 = 0.xx...xxx The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_NORM2_ABS_DEV">
		<long_desc>ROI-2: Percentage of pixels of selected color in ROI that fall into the low end of the histogram. Specified as a number &lt; 1 = 0.xx...xxx The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_STATS_STATUS">
		<long_desc>Returns flags that determines the status of different stats modules and correctness in their configuration.</long_desc>
		<bitfield name="ROI1_ROI_OFF_OUT_OF_IMG_WIN">
			<long_desc>ROI1-Status[0]: Either (x-roi-offset &gt; x-actual-size) or (y-roi-offset &gt; y-actual-size).  The stats module collects no data. Stats data will be set to all zeros.</long_desc>
		</bitfield>
		<bitfield name="ROI1_ROI_OUT_OF_BOUNDS">
			<long_desc>ROI1-Status[1] Either (x-roi-size &gt; x-actual-size) or (y-roi-size &gt; y-actual-size).  The stats module does not collect data for the exact configured ROI.</long_desc>
		</bitfield>
		<bitfield name="ROI1_ROW_TYPE_EXP_INVALID">
			<long_desc>ROI1-Status[2]: Did not observe the selected row-type/exp-type in pixel data stream.</long_desc>
		</bitfield>
		<bitfield name="ROI1_STATS_DATA_VALID">
			<long_desc>ROI1-Status[3] ROI-Stats data is valid and useable.</long_desc>
		</bitfield>
		<bitfield name="ROI2_ROI_OFF_OUT_OF_IMG_WIN">
			<long_desc>ROI2-Status[4]: Either (x-roi-offset &gt; x-actual-size) or (y-roi-offset &gt; y-actual-size).  The stats module collects no data. Stats data will be set to all zeros.</long_desc>
		</bitfield>
		<bitfield name="ROI2_ROI_OUT_OF_BOUNDS">
			<long_desc>ROI2-Status[5] Either (x-roi-size &gt; x-actual-size) or (y-roi-size &gt; y-actual-size).  The stats module does not collect data for the exact configured ROI.</long_desc>
		</bitfield>
		<bitfield name="ROI2_ROW_TYPE_EXP_INVALID">
			<long_desc>ROI2-Status[6]: Did not observe the selected row-type/exp-type in pixel data stream.</long_desc>
		</bitfield>
		<bitfield name="ROI2_STATS_DATA_VALID">
			<long_desc>ROI2-Status[7] ROI-Stats data is valid and useable.</long_desc>
		</bitfield>
		<bitfield name="ROI3_ROI_OFF_OUT_OF_IMG_WIN">
			<long_desc>ROI3-Status[8]: Either (x-roi-offset &gt; x-actual-size) or (y-roi-offset &gt; y-actual-size).  The stats module collects no data. Stats data will be set to all zeros.</long_desc>
		</bitfield>
		<bitfield name="ROI3_ROI_OUT_OF_BOUNDS">
			<long_desc>ROI3-Status[9] Either (x-roi-size &gt; x-actual-size) or (y-roi-size &gt; y-actual-size).  The stats module does not collect data for the exact configured ROI.</long_desc>
		</bitfield>
		<bitfield name="ROI3_ROW_TYPE_EXP_INVALID">
			<long_desc>ROI3-Status[10]: Did not observe the selected row-type/exp-type in pixel data stream.</long_desc>
		</bitfield>
		<bitfield name="ROI3_STATS_DATA_VALID">
			<long_desc>ROI3-Status[11] ROI-Stats data is valid and useable.</long_desc>
		</bitfield>
		<bitfield name="X_GRID_STATUS">
			<long_desc>Grid-Status [13:12]: Number of regions in x-direction: 00: 1 region, 01: 2 regions, 10: 3 regions, 11: 4 regions</long_desc>
		</bitfield>
		<bitfield name="Y_GRID_STATUS">
			<long_desc>Grid-Status [15:12]  [15:14]: Number of regions in y-direction: 00: 1 region, 01: 2 regions, 10: 3 regions, 11: 4 regions</long_desc>
		</bitfield>
	</reg>
	<reg name="AE_X0_Y0_MEAN_H">
		<long_desc>Stats mean for Grid ROI 0 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X0_Y0_MEAN_L">
		<long_desc>Stats mean for Grid ROI 0 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X0_Y1_MEAN_H">
		<long_desc>Stats mean for Grid ROI 1 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X0_Y1_MEAN_L">
		<long_desc>Stats mean for Grid ROI 1 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X0_Y2_MEAN_H">
		<long_desc>Stats mean for Grid ROI 2 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X0_Y2_MEAN_L">
		<long_desc>Stats mean for Grid ROI 2 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X0_Y3_MEAN_H">
		<long_desc>Stats mean for Grid ROI 3 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X0_Y3_MEAN_L">
		<long_desc>Stats mean for Grid ROI 3 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X1_Y0_MEAN_H">
		<long_desc>Stats mean for Grid ROI 4 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X1_Y0_MEAN_L">
		<long_desc>Stats mean for Grid ROI 4 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X1_Y1_MEAN_H">
		<long_desc>Stats mean for Grid ROI 5 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X1_Y1_MEAN_L">
		<long_desc>Stats mean for Grid ROI 5 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X1_Y2_MEAN_H">
		<long_desc>Stats mean for Grid ROI 6 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X1_Y2_MEAN_L">
		<long_desc>Stats mean for Grid ROI 6 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X1_Y3_MEAN_H">
		<long_desc>Stats mean for Grid ROI 7 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X1_Y3_MEAN_L">
		<long_desc>Stats mean for Grid ROI 7 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X2_Y0_MEAN_H">
		<long_desc>Stats mean for Grid ROI 8 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X2_Y0_MEAN_L">
		<long_desc>Stats mean for Grid ROI 8 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X2_Y1_MEAN_H">
		<long_desc>Stats mean for Grid ROI 9 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X2_Y1_MEAN_L">
		<long_desc>Stats mean for Grid ROI 9 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X2_Y2_MEAN_H">
		<long_desc>Stats mean for Grid ROI 10 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X2_Y2_MEAN_L">
		<long_desc>Stats mean for Grid ROI 10 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X2_Y3_MEAN_H">
		<long_desc>Stats mean for Grid ROI 11 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X2_Y3_MEAN_L">
		<long_desc>Stats mean for Grid ROI 11 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X3_Y0_MEAN_H">
		<long_desc>Stats mean for Grid ROI 12 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X3_Y0_MEAN_L">
		<long_desc>Stats mean for Grid ROI 12 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X3_Y1_MEAN_H">
		<long_desc>Stats mean for Grid ROI 13 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X3_Y1_MEAN_L">
		<long_desc>Stats mean for Grid ROI 13 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X3_Y2_MEAN_H">
		<long_desc>Stats mean for Grid ROI 14 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X3_Y2_MEAN_L">
		<long_desc>Stats mean for Grid ROI 14 (lower bits)</long_desc>
	</reg>
	<reg name="AE_X3_Y3_MEAN_H">
		<long_desc>Stats mean for Grid ROI 15 (higher bits)</long_desc>
	</reg>
	<reg name="AE_X3_Y3_MEAN_L">
		<long_desc>Stats mean for Grid ROI 15 (lower bits)</long_desc>
	</reg>
	<reg name="AE_MEAN3_H">
		<long_desc>ROI-3: Return the true mean of all pixels of particular color (Higher bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_MEAN3_L">
		<long_desc>ROI-3: Return the true mean of all pixels of particular color (Lower bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_HIST3_BEGIN_H">
		<long_desc>ROI-3: Code value corresponding to the histogram bin below which(hist_begin_perc*100)% of pixels exist (higher bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_HIST3_BEGIN_L">
		<long_desc>ROI-3: Code value corresponding to the histogram bin below which(hist_begin_perc*100)% of pixels exist (lower bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_HIST3_END_H">
		<long_desc>ROI-3: Code value corresponding to the histogram bin below which(hist_end_perc*100)% of pixels exist  (higher bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="CTX_RD_DATA_REG">
		<long_desc>context read data Possible values:  (0-65535).</long_desc>
	</reg>
	<reg name="SEQ_DATA_PORT">
		<long_desc>Register used to write to or read from the sequencer RAM.</long_desc>
	</reg>
	<reg name="SEQ_CTRL_PORT">
		<long_desc>Register controlling the read and write to sequencer RAM.</long_desc>
		<bitfield name="ACCESS_ADDR">
			<long_desc>Sequencer memory address to access, write or read.</long_desc>
		</bitfield>
		<bitfield name="SEQ_ECC_BYPASS">
			<long_desc>Bypass the sequencer ECC.</long_desc>
		</bitfield>
		<bitfield name="AUTO_INC_ON_READ">
			<long_desc>Automatically increment sequencer memory address when sequencer data register (seq_data_port) is read.</long_desc>
		</bitfield>
		<bitfield name="SEQUENCER_STOPPED">
			<long_desc>Status for sequencer state. 1: Sequencer stopped 0: Sequencer running</long_desc>
		</bitfield>
	</reg>
	<reg name="DBLC_DATA_0">
		<long_desc>TopCalc_fs0_t1_gr.  These 128 registers store the measurements of the dblc calibration rows.  There are 64 registers corresponding to the top calibration rows and 64 for the bottom rows.  Each block of 64 registers includes a register for each frame style (4 styles), exposure (4 exposures), and color (4 colors).  If calculations are enabled for this frame style, the results of the accumulation (taken from the Accum registers) is averaged by the number of pixels accumulated and then scaled, offset, and history weighted according to the frame style settings and then stored in this group of registers.</long_desc>
	</reg>
	<reg name="DBLC_DATA_1">
		<long_desc>TopCalc_fs0_t1_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_2">
		<long_desc>TopCalc_fs0_t1_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_3">
		<long_desc>TopCalc_fs0_t1_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_4">
		<long_desc>TopCalc_fs0_t2_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_5">
		<long_desc>TopCalc_fs0_t2_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_6">
		<long_desc>TopCalc_fs0_t2_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_7">
		<long_desc>TopCalc_fs0_t2_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_8">
		<long_desc>TopCalc_fs0_t3_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_9">
		<long_desc>TopCalc_fs0_t3_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_10">
		<long_desc>TopCalc_fs0_t3_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_11">
		<long_desc>TopCalc_fs0_t3_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_12">
		<long_desc>TopCalc_fs0_t4_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_13">
		<long_desc>TopCalc_fs0_t4_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_14">
		<long_desc>TopCalc_fs0_t4_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_15">
		<long_desc>TopCalc_fs0_t4_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_16">
		<long_desc>TopCalc_fs1_t1_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_17">
		<long_desc>TopCalc_fs1_t1_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_18">
		<long_desc>TopCalc_fs1_t1_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_19">
		<long_desc>TopCalc_fs1_t1_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_20">
		<long_desc>TopCalc_fs1_t2_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_21">
		<long_desc>TopCalc_fs1_t2_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_22">
		<long_desc>TopCalc_fs1_t2_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_23">
		<long_desc>TopCalc_fs1_t2_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_24">
		<long_desc>TopCalc_fs1_t3_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_25">
		<long_desc>TopCalc_fs1_t3_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_26">
		<long_desc>TopCalc_fs1_t3_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_27">
		<long_desc>TopCalc_fs1_t3_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_28">
		<long_desc>TopCalc_fs1_t4_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_29">
		<long_desc>TopCalc_fs1_t4_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_30">
		<long_desc>TopCalc_fs1_t4_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_31">
		<long_desc>TopCalc_fs1_t4_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_32">
		<long_desc>TopCalc_fs2_t1_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_33">
		<long_desc>TopCalc_fs2_t1_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_34">
		<long_desc>TopCalc_fs2_t1_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_35">
		<long_desc>TopCalc_fs2_t1_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_36">
		<long_desc>TopCalc_fs2_t2_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_37">
		<long_desc>TopCalc_fs2_t2_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_38">
		<long_desc>TopCalc_fs2_t2_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_39">
		<long_desc>TopCalc_fs2_t2_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_40">
		<long_desc>TopCalc_fs2_t3_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_41">
		<long_desc>TopCalc_fs2_t3_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_42">
		<long_desc>TopCalc_fs2_t3_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_43">
		<long_desc>TopCalc_fs2_t3_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_44">
		<long_desc>TopCalc_fs2_t4_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_45">
		<long_desc>TopCalc_fs2_t4_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_46">
		<long_desc>TopCalc_fs2_t4_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_47">
		<long_desc>TopCalc_fs2_t4_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_48">
		<long_desc>TopCalc_fs3_t1_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_49">
		<long_desc>TopCalc_fs3_t1_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_50">
		<long_desc>TopCalc_fs3_t1_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_51">
		<long_desc>TopCalc_fs3_t1_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_52">
		<long_desc>TopCalc_fs3_t2_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_53">
		<long_desc>TopCalc_fs3_t2_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_54">
		<long_desc>TopCalc_fs3_t2_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_55">
		<long_desc>TopCalc_fs3_t2_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_56">
		<long_desc>TopCalc_fs3_t3_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_57">
		<long_desc>TopCalc_fs3_t3_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_58">
		<long_desc>TopCalc_fs3_t3_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_59">
		<long_desc>TopCalc_fs3_t3_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_60">
		<long_desc>TopCalc_fs3_t4_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_61">
		<long_desc>TopCalc_fs3_t4_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_62">
		<long_desc>TopCalc_fs3_t4_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_63">
		<long_desc>TopCalc_fs3_t4_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_64">
		<long_desc>BtmCalc_fs0_t1_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_65">
		<long_desc>BtmCalc_fs0_t1_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_66">
		<long_desc>BtmCalc_fs0_t1_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_67">
		<long_desc>BtmCalc_fs0_t1_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_68">
		<long_desc>BtmCalc_fs0_t2_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_69">
		<long_desc>BtmCalc_fs0_t2_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_70">
		<long_desc>BtmCalc_fs0_t2_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_71">
		<long_desc>BtmCalc_fs0_t2_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_72">
		<long_desc>BtmCalc_fs0_t3_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_73">
		<long_desc>BtmCalc_fs0_t3_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_74">
		<long_desc>BtmCalc_fs0_t3_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_75">
		<long_desc>BtmCalc_fs0_t3_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_76">
		<long_desc>BtmCalc_fs0_t4_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_77">
		<long_desc>BtmCalc_fs0_t4_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_78">
		<long_desc>BtmCalc_fs0_t4_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_79">
		<long_desc>BtmCalc_fs0_t4_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_80">
		<long_desc>BtmCalc_fs1_t1_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_81">
		<long_desc>BtmCalc_fs1_t1_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_82">
		<long_desc>BtmCalc_fs1_t1_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_83">
		<long_desc>BtmCalc_fs1_t1_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_84">
		<long_desc>BtmCalc_fs1_t2_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_85">
		<long_desc>BtmCalc_fs1_t2_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_86">
		<long_desc>BtmCalc_fs1_t2_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_87">
		<long_desc>BtmCalc_fs1_t2_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_88">
		<long_desc>BtmCalc_fs1_t3_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_89">
		<long_desc>BtmCalc_fs1_t3_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_90">
		<long_desc>BtmCalc_fs1_t3_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_91">
		<long_desc>BtmCalc_fs1_t3_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_92">
		<long_desc>BtmCalc_fs1_t4_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_93">
		<long_desc>BtmCalc_fs1_t4_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_94">
		<long_desc>BtmCalc_fs1_t4_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_95">
		<long_desc>BtmCalc_fs1_t4_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_96">
		<long_desc>BtmCalc_fs2_t1_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_97">
		<long_desc>BtmCalc_fs2_t1_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_98">
		<long_desc>BtmCalc_fs2_t1_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_99">
		<long_desc>BtmCalc_fs2_t1_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_100">
		<long_desc>BtmCalc_fs2_t2_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_101">
		<long_desc>BtmCalc_fs2_t2_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_102">
		<long_desc>BtmCalc_fs2_t2_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_103">
		<long_desc>BtmCalc_fs2_t2_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_104">
		<long_desc>BtmCalc_fs2_t3_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_105">
		<long_desc>BtmCalc_fs2_t3_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_106">
		<long_desc>BtmCalc_fs2_t3_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_107">
		<long_desc>BtmCalc_fs2_t3_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_108">
		<long_desc>BtmCalc_fs2_t4_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_109">
		<long_desc>BtmCalc_fs2_t4_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_110">
		<long_desc>BtmCalc_fs2_t4_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_111">
		<long_desc>BtmCalc_fs2_t4_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_112">
		<long_desc>BtmCalc_fs3_t1_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_113">
		<long_desc>BtmCalc_fs3_t1_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_114">
		<long_desc>BtmCalc_fs3_t1_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_115">
		<long_desc>BtmCalc_fs3_t1_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_116">
		<long_desc>BtmCalc_fs3_t2_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_117">
		<long_desc>BtmCalc_fs3_t2_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_118">
		<long_desc>BtmCalc_fs3_t2_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_119">
		<long_desc>BtmCalc_fs3_t2_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_120">
		<long_desc>BtmCalc_fs3_t3_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_121">
		<long_desc>BtmCalc_fs3_t3_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_122">
		<long_desc>BtmCalc_fs3_t3_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_123">
		<long_desc>BtmCalc_fs3_t3_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_124">
		<long_desc>BtmCalc_fs3_t4_gr.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_125">
		<long_desc>BtmCalc_fs3_t4_r.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_126">
		<long_desc>BtmCalc_fs3_t4_b.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_127">
		<long_desc>BtmCalc_fs3_t4_gb.  See dblc_data_0 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_128">
		<long_desc>Correction_fs0_t1_gr.  This is the first of 64 correction registers.  There is one register corresponding to each frame style (4 styles), exposure (4 exposures), and color (4 bayer colors).  The contents of these registers can automatically copied from the calculation registers if enabled by the xfer enable setting of the corresponding frame style.  As the registers are copied, colors can be averaged together according to the color policy for the corresponding frame style.  These registers can be manually controlled by disabling the transfer.</long_desc>
	</reg>
	<reg name="DBLC_DATA_129">
		<long_desc>Correction_fs0_t1_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_130">
		<long_desc>Correction_fs0_t1_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_131">
		<long_desc>Correction_fs0_t1_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_132">
		<long_desc>Correction_fs0_t2_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_133">
		<long_desc>Correction_fs0_t2_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_134">
		<long_desc>Correction_fs0_t2_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_135">
		<long_desc>Correction_fs0_t2_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_136">
		<long_desc>Correction_fs0_t3_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_137">
		<long_desc>Correction_fs0_t3_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_138">
		<long_desc>Correction_fs0_t3_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_139">
		<long_desc>Correction_fs0_t3_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_140">
		<long_desc>Correction_fs0_t4_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_141">
		<long_desc>Correction_fs0_t4_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_142">
		<long_desc>Correction_fs0_t4_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_143">
		<long_desc>Correction_fs0_t4_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_144">
		<long_desc>Correction_fs1_t1_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_145">
		<long_desc>Correction_fs1_t1_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_146">
		<long_desc>Correction_fs1_t1_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_147">
		<long_desc>Correction_fs1_t1_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_148">
		<long_desc>Correction_fs1_t2_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_149">
		<long_desc>Correction_fs1_t2_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_150">
		<long_desc>Correction_fs1_t2_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_151">
		<long_desc>Correction_fs1_t2_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_152">
		<long_desc>Correction_fs1_t3_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_153">
		<long_desc>Correction_fs1_t3_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_154">
		<long_desc>Correction_fs1_t3_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_155">
		<long_desc>Correction_fs1_t3_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_156">
		<long_desc>Correction_fs1_t4_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_157">
		<long_desc>Correction_fs1_t4_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_158">
		<long_desc>Correction_fs1_t4_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_159">
		<long_desc>Correction_fs1_t4_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_160">
		<long_desc>Correction_fs2_t1_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_161">
		<long_desc>Correction_fs2_t1_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_162">
		<long_desc>Correction_fs2_t1_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_163">
		<long_desc>Correction_fs2_t1_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_164">
		<long_desc>Correction_fs2_t2_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_165">
		<long_desc>Correction_fs2_t2_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_166">
		<long_desc>Correction_fs2_t2_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_167">
		<long_desc>Correction_fs2_t2_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_168">
		<long_desc>Correction_fs2_t3_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_169">
		<long_desc>Correction_fs2_t3_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_170">
		<long_desc>Correction_fs2_t3_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_171">
		<long_desc>Correction_fs2_t3_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_172">
		<long_desc>Correction_fs2_t4_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_173">
		<long_desc>Correction_fs2_t4_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_174">
		<long_desc>Correction_fs2_t4_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_175">
		<long_desc>Correction_fs2_t4_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_176">
		<long_desc>Correction_fs3_t1_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_177">
		<long_desc>Correction_fs3_t1_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_178">
		<long_desc>Correction_fs3_t1_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_179">
		<long_desc>Correction_fs3_t1_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_180">
		<long_desc>Correction_fs3_t2_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_181">
		<long_desc>Correction_fs3_t2_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_182">
		<long_desc>Correction_fs3_t2_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_183">
		<long_desc>Correction_fs3_t2_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_184">
		<long_desc>Correction_fs3_t3_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_185">
		<long_desc>Correction_fs3_t3_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_186">
		<long_desc>Correction_fs3_t3_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_187">
		<long_desc>Correction_fs3_t3_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_188">
		<long_desc>Correction_fs3_t4_gr.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_189">
		<long_desc>Correction_fs3_t4_r.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_190">
		<long_desc>Correction_fs3_t4_b.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_191">
		<long_desc>Correction_fs3_t4_gb.  See dblc_data_128 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_192">
		<long_desc>DTRCalc_t1_gr.  This group of 16 register captures measurements and calculations from the DTR rows.</long_desc>
	</reg>
	<reg name="DBLC_DATA_193">
		<long_desc>DTRCalc_t1_r.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_194">
		<long_desc>DTRCalc_t1_b.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_195">
		<long_desc>DTRCalc_t1_gb.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_196">
		<long_desc>DTRCalc_t2_gr.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_197">
		<long_desc>DTRCalc_t2_r.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_198">
		<long_desc>DTRCalc_t2_b.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_199">
		<long_desc>DTRCalc_t2_gb.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_200">
		<long_desc>DTRCalc_t3_gr.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_201">
		<long_desc>DTRCalc_t3_r.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_202">
		<long_desc>DTRCalc_t3_b.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_203">
		<long_desc>DTRCalc_t3_gb.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_204">
		<long_desc>DTRCalc_t4_gr.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_205">
		<long_desc>DTRCalc_t4_r.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_206">
		<long_desc>DTRCalc_t4_b.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_207">
		<long_desc>DTRCalc_t4_gb.  See dblc_data_192 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_208">
		<long_desc>DTRCorrection_t1_gr.  This group of registers was intended to be the correction values applied to DTR rows.  This feature is not functional.</long_desc>
	</reg>
	<reg name="DBLC_DATA_209">
		<long_desc>DTRCorrection_t1_r.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_210">
		<long_desc>DTRCorrection_t1_b.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_211">
		<long_desc>DTRCorrection_t1_gb.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_212">
		<long_desc>DTRCorrection_t2_gr.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_213">
		<long_desc>DTRCorrection_t2_r.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_214">
		<long_desc>DTRCorrection_t2_b.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_215">
		<long_desc>DTRCorrection_t2_gb.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_216">
		<long_desc>DTRCorrection_t3_gr.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_217">
		<long_desc>DTRCorrection_t3_r.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_218">
		<long_desc>DTRCorrection_t3_b.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_219">
		<long_desc>DTRCorrection_t3_gb.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_220">
		<long_desc>DTRCorrection_t4_gr.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_221">
		<long_desc>DTRCorrection_t4_r.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_222">
		<long_desc>DTRCorrection_t4_b.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_223">
		<long_desc>DTRCorrection_t4_gb.  See dblc_data_208 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_224">
		<long_desc>Accum_t1_gr_high.  These 16 32-bit registers accumulate sums of all the pixels encountered in the DBLC rows.  The registers for each exposure are used to accumulate sums from the top rows first, then are cleared and used again for the bottom rows.</long_desc>
	</reg>
	<reg name="DBLC_DATA_225">
		<long_desc>Accum_t1_gr_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_226">
		<long_desc>Accum_t1_r_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_227">
		<long_desc>Accum_t1_r_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_228">
		<long_desc>Accum_t1_b_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_229">
		<long_desc>Accum_t1_b_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_230">
		<long_desc>Accum_t1_gb_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_231">
		<long_desc>Accum_t1_gb_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_232">
		<long_desc>Accum_t2_gr_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_233">
		<long_desc>Accum_t2_gr_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_234">
		<long_desc>Accum_t2_r_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_235">
		<long_desc>Accum_t2_r_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_236">
		<long_desc>Accum_t2_b_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_237">
		<long_desc>Accum_t2_b_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_238">
		<long_desc>Accum_t2_gb_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_239">
		<long_desc>Accum_t2_gb_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_240">
		<long_desc>Accum_t3_gr_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_241">
		<long_desc>Accum_t3_gr_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_242">
		<long_desc>Accum_t3_r_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_243">
		<long_desc>Accum_t3_r_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_244">
		<long_desc>Accum_t3_b_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_245">
		<long_desc>Accum_t3_b_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_246">
		<long_desc>Accum_t3_gb_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_247">
		<long_desc>Accum_t3_gb_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_248">
		<long_desc>Accum_t4_gr_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_249">
		<long_desc>Accum_t4_gr_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_250">
		<long_desc>Accum_t4_r_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_251">
		<long_desc>Accum_t4_r_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_252">
		<long_desc>Accum_t4_b_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_253">
		<long_desc>Accum_t4_b_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_254">
		<long_desc>Accum_t4_gb_high.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="DBLC_DATA_255">
		<long_desc>Accum_t4_gb_low.  See dblc_data_224 for description.</long_desc>
	</reg>
	<reg name="STATC_ERR">
		<long_desc>Analog to digital interface error flag register</long_desc>
		<bitfield name="STATC_ERR_BAD_WRADDR_FLG">
			<long_desc>Set when there is an error in the readback of sreg write address. Clear by writing a 0 to the bit.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_WRDATA_FLG">
			<long_desc>Set when there is an error in the readback of sreg write data. Clear by writing a 0 to the bit.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_RDDATA_FLG">
			<long_desc>Set when there is an error in the readback of sreg data bus. Clear by writing a 0 to the bit.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST2_FLG">
			<long_desc>Set when there is a fault in dtest 2. Clear by writing a 0 to the bit.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST3_FLG">
			<long_desc>Set when there is a fault in dtest 3. Clear by writing a 0 to the bit.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST4_FLG">
			<long_desc>Set when there is a fault in dtest 4. Clear by writing a 0 to the bit.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST12_FLG">
			<long_desc>Set when there is a fault in dtest 12. Clear by writing a 0 to the bit.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST13_FLG">
			<long_desc>Set when there is a fault in dtest 13. Clear by writing a 0 to the bit.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST14_FLG">
			<long_desc>Set when there is a fault in dtest 14. Clear by writing a 0 to the bit.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST15_FLG">
			<long_desc>Set when there is a fault in dtest 15. Clear by writing a 0 to the bit.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST26_FLG">
			<long_desc>Set when there is a fault in dtest 26. Clear by writing a 0 to the bit.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST100_FLG">
			<long_desc>Set when there is a fault in dtest 100. Clear by writing a 0 to the bit.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST101_FLG">
			<long_desc>Set when there is a fault in dtest 101. Clear by writing a 0 to the bit.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST103_FLG">
			<long_desc>Set when there is a fault in dtest 103. Clear by writing a 0 to the bit.</long_desc>
		</bitfield>
	</reg>
	<reg name="AE_HIST3_END_L">
		<long_desc>ROI-3: Code value corresponding to the histogram bin below which(hist_end_perc*100)% of pixels exist  (lower 16 bits). The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_LOW3_END_MEAN_H">
		<long_desc>ROI-3: The true mean of all Gr pixels in the ROI that fall into the low end of the histogram (where low end is defined by hist_div).  (higher bits) The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_LOW3_END_MEAN_L">
		<long_desc>ROI-3: The true mean of all Gr pixels in the ROI that fall into the low end of the histogram (where low end is defined by hist_div).  (lower 16 bits) The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_PERC3_LOW_END">
		<long_desc>ROI-3: Percentage of Gr pixels in ROI that fall into the low end of the histogram. Specified as a number &lt; 1 = 0.xx...xxx The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="AE_NORM3_ABS_DEV">
		<long_desc>ROI-3: Percentage of Gr pixels in ROI that fall into the low end of the histogram. Specified as a number &lt; 1 = 0.xx...xxx The value is updated at the end of every frame.</long_desc>
	</reg>
	<reg name="CHIP_VERSION_REG">
		<long_desc>Model ID.</long_desc>
	</reg>
	<reg name="Y_ADDR_START_">
		<long_desc>The  first row of visible pixels to be read out (not counting any dark rows  that may be read). To move the image window, set this register to the  starting Y value.</long_desc>
	</reg>
	<reg name="X_ADDR_START_">
		<long_desc>The  first column of visible pixels to be read out (not counting any dark  columns that may be read). To move the image window, set this register  to the starting X value.</long_desc>
	</reg>
	<reg name="Y_ADDR_END_">
		<long_desc>The last row of visible pixels to be read out.</long_desc>
	</reg>
	<reg name="X_ADDR_END_">
		<long_desc>The last column of visible pixels to be read out.</long_desc>
	</reg>
	<reg name="FRAME_LENGTH_LINES_">
		<long_desc>The number of complete lines (rows) in the output frame. This includes visible lines and vertical blanking lines.  </long_desc>
	</reg>
	<reg name="LINE_LENGTH_PCK_">
		<long_desc>The number of pixel clock periods in one line (row) time. This includes visible pixels and horizontal blanking time. The minimum value supported in HDR mode is 0x672.</long_desc>
	</reg>
	<reg name="REVISION_NUMBER">
		<long_desc>Revision number.</long_desc>
	</reg>
	<reg name="LOCK_CONTROL">
		<long_desc>This register protects the mirror mode select (register read mode). When set to value 0xBEEF, the horizontal and vertical mirror modes can be changed, otherwise these values are locked.</long_desc>
	</reg>
	<reg name="COARSE_INTEGRATION_TIME_">
		<long_desc>Integration time specified in multiples of line_length_pck_.</long_desc>
	</reg>
	<reg name="FINE_INTEGRATION_TIME_">
		<long_desc>Fine integration is used to delay the shutter operation after the sample operation is finished. Thus, the integration time is decreased. The resolution is 1 pixel clock time. Note that for short line length (R0x300C, R0x303E) values, the available time for fine shutter is limited. If programmed for more than available time, the normal sensor operation will be distrupted.</long_desc>
	</reg>
	<reg name="COARSE_INTEGRATION_TIME_CB">
		<long_desc>Coarse integration time in context B.</long_desc>
	</reg>
	<reg name="FINE_INTEGRATION_TIME_CB">
		<long_desc>Fine integration time in context B.</long_desc>
	</reg>
	<reg name="RESET_REGISTER">
		<long_desc>Controls the operation of the sensor. For details see the bit field descriptions.</long_desc>
		<bitfield name="RESET_REGISTER_RESET">
			<long_desc>This bit always reads as 0. Setting this bit initiates a reset sequence: the frame being generated will be truncated.</long_desc>
		</bitfield>
		<bitfield name="RESET_REGISTER_RESTART">
			<long_desc>This bit always reads as 0. Setting this bit causes the sensor to truncate the current frame at the end of the current row and start resetting (integrating) the first row. The delay before the first valid frame is read out is equal to the integration time.</long_desc>
		</bitfield>
		<bitfield name="RESET_REGISTER_STREAM">
			<long_desc>1: Places the sensor in streaming mode.   0: Places the sensor in a low power mode. The result of clearing this bit depends upon the operating mode of the sensor.  Entry and exit from streaming mode can also be controlled from the signal interface.</long_desc>
		</bitfield>
		<bitfield name="RESET_REGISTER_LOCK_REG">
			<long_desc>Many parameter limitation registers that are specified as read-only are actually implemented as read/write registers. Clearing this bit allows such registers to be written.</long_desc>
		</bitfield>
		<bitfield name="RESET_REGISTER_STDBY_EOF">
			<long_desc>0 = Transition to standby is synchronized to the end of a sensor row readout (held-off until LINE_VALID has fallen).  1 = Transition to standby is synchronized to the end of a frame.</long_desc>
		</bitfield>
		<bitfield name="RESET_REGISTER_DRIVE_PINS">
			<long_desc>0: The parallel data interface (DOUT[13:0], LINE_VALID, FRAME_VALID, and PIXCLK) may enter a high-impedance state (depending upon the enabling and use of the pad OUTPUT_ENABLE_N) 1: The parallel data interface is driven.  This bit is "do not care" unless bit[7]=1.</long_desc>
		</bitfield>
		<bitfield name="RESET_REGISTER_PARALLEL_EN">
			<long_desc>0: The parallel data interface (DOUT[13:0], LINE_VALID, FRAME_VALID, and PIXCLK) is disabled and the outputs are placed in a high-impedance state.  1: The parallel data interface is enabled. The output signals can be switched between a driven and a high-impedance state using output-enable control.</long_desc>
		</bitfield>
		<bitfield name="RESET_REGISTER_GPI_EN">
			<long_desc>When clear, the GPIO input functions OUTPUT_ENABLE_N, TRIGGER, and STANDBY are disabled.  When set, the input functions are enabled.  Note that the GPIO pins must also be configured to map the input function(s) onto a particular GPIO pin(s) and to enable the respective pin(s) input buffer.</long_desc>
		</bitfield>
		<bitfield name="RESET_REGISTER_MASK_BAD">
			<long_desc>0: The sensor will produce bad (corrupted) frames as a result of some register changes.  1: Bad (corrupted) frames are masked within the sensor by extending the vertical blanking time for the duration of the bad frame.</long_desc>
		</bitfield>
		<bitfield name="RESET_REGISTER_RESTART_BAD">
			<long_desc>1: A restart is forced any time a bad frame is detected. This can shorten the delay when waiting for a good frame, since the delay for masking out a bad frame will be the integration time rather than the full-frame time.</long_desc>
		</bitfield>
		<bitfield name="FORCED_PLL_ON">
			<long_desc>0: PLL will be powered down when the sensor is in standby (low power mode). 1: PLL will be enabled even when the sensor is in "standby."</long_desc>
		</bitfield>
		<bitfield name="RESET_REGISTER_SMIA_SERIALISER_DIS">
			<long_desc>0: HiSPi Interface Enabled. 1: HiSPi interface Disabled.</long_desc>
		</bitfield>
		<bitfield name="RESET_LPF_ENABLE">
			<long_desc>Enables a glitch filter for the RESET_BAR pin.  0: Reset LPF Disabled. 1: Reset LPF Enabled.</long_desc>
		</bitfield>
		<bitfield name="RESET_REGISTER_GROUPED_PARAMETER_HOLD">
			<long_desc>0 = Update of many of the registers is synchronized to frame start.  1 = Inhibit register updates. Register changes will remain pending until this bit is returned to 0. When this bit is returned to 0, all pending register updates will be made on the next frame start.</long_desc>
		</bitfield>
	</reg>
	<reg name="MODE_SELECT_">
		<long_desc>This register is an alias of reset_register[2].</long_desc>
	</reg>
	<reg name="IMAGE_ORIENTATION_">
		<long_desc>This register is an alias of read_mode[15:14].</long_desc>
	</reg>
	<reg name="DATA_PEDESTAL_">
		<long_desc>Constant offset that is added to pixel values at the end of datapath (after all corrections).</long_desc>
		<bitfield name="DATA_PEDESTAL">
			<long_desc>Constant offset that is added to pixel values at the end of datapath (after all corrections).</long_desc>
		</bitfield>
		<bitfield name="DISABLE_ACTIVE_DATA_PEDESTAL">
			<long_desc>When enabled the data_pedestal is not applied to the imaging pixels.</long_desc>
		</bitfield>
		<bitfield name="PEDESTAL_ATR">
			<long_desc>When enabled the data_pedestal is applied to the ATR rows.</long_desc>
		</bitfield>
		<bitfield name="DISABLE_DBLC_DATA_PEDESTAL">
			<long_desc>When the bit is set, the data pedestal is disabled on the DBLC rows and ODC columns.</long_desc>
		</bitfield>
	</reg>
	<reg name="SOFTWARE_RESET">
		<long_desc>This register is an alias of reset_register[0].</long_desc>
	</reg>
	<reg name="GROUPED_PARAMETER_HOLD_">
		<long_desc>This register is an alias of reset_register[15].</long_desc>
	</reg>
	<reg name="MASK_CORRUPTED_FRAMES_">
		<long_desc>This register is an alias of reset_register[9].</long_desc>
	</reg>
	<reg name="PIXEL_ORDER_">
		<long_desc>The value in this register reflects the value in R0x3040[15:14]. 00 = Vertical flip and horizontal mirror disabled 01 = Horizontal mirror enabled 10 = Vertical flip enabled 11 = Vertical flip and horizontal mirror enabled</long_desc>
	</reg>
	<reg name="ROW_SPEED">
		<long_desc>Bits [6:4] of this register define the phase of the output pixclk. 2 sets of values are correct:  a) 000, 010, 100, 110 =&gt; 0 delay (DOUT changes on rising edge of pixclk).  b) 001, 011, 101, 111 =&gt; 1/2 clk delay (DOUT changes on falling edge of pixclk).</long_desc>
	</reg>
	<reg name="VT_PIX_CLK_DIV">
		<long_desc>Sets the ratio of the serial output clock and sensor operation clock (P2 clock divider in PLL).</long_desc>
	</reg>
	<reg name="VT_SYS_CLK_DIV">
		<long_desc>sets the ratio of the VCO clk and the serial output clock (P1 divider in PLL).</long_desc>
	</reg>
	<reg name="PRE_PLL_CLK_DIV">
		<long_desc>PLL input pre-divider value.  See Developer&apos;s guide for values</long_desc>
	</reg>
	<reg name="PLL_MULTIPLIER">
		<long_desc>pll multiplier.  See Developer&apos;s guide for values</long_desc>
	</reg>
	<reg name="SCALING_MODE">
		<long_desc>0: Disable scaler 1: Enable horizontal scaling 2: Enable horizontal and vertical scaling 3: Reserved Legal values:  [0, 2].</long_desc>
		<bitfield name="SCALING_MODE_CONTEXTA">
			<long_desc>0: Disable scaler 1: Enable horizontal scaling 2: Enable horizontal and vertical scaling 3: Reserved Legal values:  [0, 2].</long_desc>
		</bitfield>
		<bitfield name="SCALING_MODE_CONTEXTB">
			<long_desc>0: Disable scaler 1: Enable horizontal scaling 2: Enable horizontal and vertical scaling 3: Reserved Legal values:  [0, 2].</long_desc>
		</bitfield>
	</reg>
	<reg name="CTX_CONTROL_REG">
		<long_desc>context control register</long_desc>
		<bitfield name="CONTEXT_SELECT">
			<long_desc>Register to set the RAM based context being used</long_desc>
		</bitfield>
		<bitfield name="CONTEXT_MULTI_NUM">
			<long_desc>Set number of consecutive contexts to read out when ctx_multi is set</long_desc>
		</bitfield>
		<bitfield name="CONTEXT_MULTI">
			<long_desc>Enable Multiple context to be read out</long_desc>
		</bitfield>
		<bitfield name="CONTEXT_MULTI_SYNC_MODE">
			<long_desc>When set, multiple contexts are synced to the start of readout frames, else they are synced to the start of exposure frames</long_desc>
		</bitfield>
		<bitfield name="CONTEXT_MULTI_CYCLE_MODE">
			<long_desc>enable multi frame context to cycle frame by frame from context 0 to context_multi_num.</long_desc>
		</bitfield>
		<bitfield name="I2C_AUTO_INC_DISABLE">
			<long_desc>Disable auto increment of addresses during i2c access</long_desc>
		</bitfield>
		<bitfield name="CTX__I2C_ADDR_SEL">
			<long_desc>Allows for context RAM to be put into the I2C address map.</long_desc>
		</bitfield>
		<bitfield name="CONTEXT_LOAD">
			<long_desc>Load context immediately</long_desc>
		</bitfield>
	</reg>
	<reg name="OP_WORD_CLK_DIV">
		<long_desc>Clock divisor applied to the output system clock to generate the output pixel clock.</long_desc>
	</reg>
	<reg name="OP_SYS_CLK_DIV">
		<long_desc>Clock divisor applied to PLL output clock to generate output system clock.</long_desc>
	</reg>
	<reg name="LINE_LENGTH_PCK_CB">
		<long_desc>Line length in context B. The number of pixel clock periods in one line (row) time. This includes visible pixels and horizontal blanking time. Only even values are allowed. For smooth operation this would be the same value as LINE_LENGTH_PCK (0x300C).</long_desc>
	</reg>
	<reg name="READ_MODE">
		<long_desc>read mode control register</long_desc>
		<bitfield name="EMBED_ROWS_T2">
			<long_desc>Adds embedded data in place of dummy embedded data for T2 exposure.</long_desc>
		</bitfield>
		<bitfield name="READ_MODE_COL_SUM">
			<long_desc>Column sum mode.  Pixel values are summed in the digital domain.  Use when skipping is enabled by setting x_odd_inc.</long_desc>
		</bitfield>
		<bitfield name="READ_MODE_ROW_BIN_CB">
			<long_desc>Analog row binning control for context B.  Use when row-wise skipping is enabled by setting y_odd_inc.  The y_addr_start must be an even number when using row binning.</long_desc>
		</bitfield>
		<bitfield name="READ_MODE_COL_BIN_CB">
			<long_desc>Column binning mode in context B.  Pixel values are averaged in the digital domain.  Use when skipping is enabled by setting x_odd_inc.</long_desc>
		</bitfield>
		<bitfield name="READ_MODE_ROW_BIN">
			<long_desc>Analog row binning control in context A.  Use when row-wise skipping is enabled by setting y_odd_inc.  The y_addr_start must be an even number when using row binning.</long_desc>
		</bitfield>
		<bitfield name="READ_MODE_COL_BIN">
			<long_desc>Column binning mode in context A.  Pixel values are averaged in the digital domain.  Use when skipping is enabled by setting x_odd_inc.</long_desc>
		</bitfield>
		<bitfield name="READ_MODE_HORIZ_MIRROR">
			<long_desc>0: Normal readout  1: Readout is mirrored horizontally so that the column specified by x_addr_end_  (+1) is read out of the sensor first.  This register can only be changed when streaming is disabled</long_desc>
		</bitfield>
		<bitfield name="READ_MODE_VERT_FLIP">
			<long_desc>0: Normal readout  1: Readout is flipped (mirrored) vertically so that the row specified by y_addr_end_ (+1) is read out of the sensor first.  This register can only be changed when streaming is disabled</long_desc>
		</bitfield>
	</reg>
	<reg name="EXTRA_DELAY">
		<long_desc>The last row in the frame is extended by the number of the sensor core clock periods specified here. The extra_delay must be configured to an even value.  This register can be used to fine-tune the sensor maximum frame-rate.</long_desc>
	</reg>
	<reg name="DARK_CONTROL">
		<long_desc>dark algorithm and display control</long_desc>
		<bitfield name="DARK_CONTROL_DISABLE_BORDER_PADDING">
			<long_desc>1: Border Rows are not padded with fixed value  0: Border Rows are padded with fixed value.</long_desc>
		</bitfield>
		<bitfield name="DARK_CONTROL_SHOW_DARK_COLS">
			<long_desc>00: No dark columns,  optically dark columns (ODC) or row ROM columns (RRC) are included in the LV output.  01: Row ROM columns (RRC) are included in the LV and output.  10: Dark columns (tied) used for row noise correction, optically dark columns (ODC) and row ROM columns (RRC) are included in the LV and output.  11: Optically dark columns (ODC) and row ROM columns (RRC) are included in the LV and output. </long_desc>
		</bitfield>
		<bitfield name="DARK_CONTROL_ROW_NOISE_CORRECTION_EN">
			<long_desc>0: Row-noise cancellation algorithm is disabled    1: Row-noise cancellation algorithm is enabled.</long_desc>
		</bitfield>
		<bitfield name="DARK_CONTROL_SHOW_DARK_EXTRA_ROWS">
			<long_desc>1: The delta dark rows (including guard rows) will be included in FV and output. Row noise correction and dblc_pedestal will be applied to the data.  By default the guard rows will be turned into padding data.  See disable_border_padding.</long_desc>
		</bitfield>
		<bitfield name="DARK_CONTROL_SHOW_ATR_ROWS">
			<long_desc>If set the analog test rows will be output. No correction will be applied to the data.</long_desc>
		</bitfield>
		<bitfield name="DARK_CONTROL_SHOW_DTR_ROWS">
			<long_desc>If set the digital test rows will be included in the output. The process_dtr register controls the processing that is applied to the DTR data.</long_desc>
		</bitfield>
	</reg>
	<reg name="OTPM_CONTROL">
		<long_desc>otpm control</long_desc>
		<bitfield name="OTPM_CONTROL_AUTO_WR_START">
			<long_desc>Trigger automatic OTPM write sequence. The high voltage must be available on the high voltage pad before this sequence is triggered.  The OTPM address to start from will be taken from otpm_manual_control[15:8]. The length of the data to program is taken from otpm_record[7:0]. The data is taken from the otpm_data* registers.</long_desc>
		</bitfield>
		<bitfield name="OTPM_CONTROL_DISABLE_AUTO_READ">
			<long_desc>When register bit is set to 1, disable automatic OTPM read sequence.  </long_desc>
		</bitfield>
		<bitfield name="OTPM_CONTROL_AUTO_RD_START">
			<long_desc>Trigger automatic OTPM read sequence.  When bypass_record=0, record(s) may be read out by record type (otpm_record[15:8]) or by OTPM address (otpm_config[8:0]).  The payload of the record(s) will appear in the otpm_data* registers. When bypass_record = 1, the OTPM address to start from will be taken from otpm_manual_control[15:8]. The length of the data to read is taken from otpm_record[7:0]. The data read from OTPM will appear in the otpm_data* registers.  </long_desc>
		</bitfield>
		<bitfield name="AUTO_INVALIDATE">
			<long_desc>Auto write has no re-try, on detection of a programming error the sequence aborts, after an abort the user may re-issue the auto write with the auto_invalidate bit set (0x304a[7]) or invalidating the record can be done manually. Blank checking is evoked by issuing auto_rd_start with auto_invalidate.</long_desc>
		</bitfield>
		<bitfield name="AUTO_RD_NEXT_START">
			<long_desc>To be used when single_record = 1 and bypass_record = 0.  Triggers automatic OTPM read sequence to read the next record; bit 4 and bit 9 should both be set to 1.</long_desc>
		</bitfield>
		<bitfield name="SINGLE_RECORD_ONLY">
			<long_desc>When set, automatic read sequence will end after one record is read out.</long_desc>
		</bitfield>
		<bitfield name="OTPM_ENABLE_STANDBY">
			<long_desc>When set,  enable otpm control logic to go into standby.</long_desc>
		</bitfield>
	</reg>
	<reg name="OTPM_RECORD">
		<long_desc>otpm_record</long_desc>
		<bitfield name="AUTO_LENGTH">
			<long_desc>Length of record payload in 16-bit words (between 1 and 255).</long_desc>
		</bitfield>
		<bitfield name="AUTO_TYPE">
			<long_desc>Type of record.  Currently supported types are: 0x02 - Default registers loaded before software standby. 0x1n - Default registers loaded after software standby. 0x2n - Register sets. Other types are only available for readback from the OTPM RAM through the otpm_data_* registers.</long_desc>
		</bitfield>
	</reg>
	<reg name="OTPM_MANUAL_CONTROL">
		<long_desc>otpm_manual_control</long_desc>
		<bitfield name="OTPM_MANUAL_SINGLE_WR_START">
			<long_desc>Trigger single OTPM write sequence. The high voltage must be available on the high voltage pad before this sequence is triggered. otpm_manual_control[14:8] is the address of the memory cell that will be programmed to 1. A single read sequence will automatically be triggered for the same address. This can be used to determine whether the program was successful.</long_desc>
		</bitfield>
		<bitfield name="OTPM_MANUAL_SINGLE_RD_START">
			<long_desc>Trigger single OTPM read sequence from the memory address programmed in otpm_manual_control[14:8].</long_desc>
		</bitfield>
	</reg>
	<reg name="OTPM_MANUAL_ADDR">
		<long_desc>otpm manual address</long_desc>
	</reg>
	<reg name="OTPM_EXPR">
		<long_desc>otpm_expr controls</long_desc>
		<bitfield name="OTPM_EXPR_BYPASS_RECORD">
			<long_desc>0: OTPM automatic read and write sequences will impose a record structure on data transferred between otpm_data* registers and the OTPM. 1: OTPM automatic read and write sequences will transfer data directly between the otpm_data* registers and the OTPM; the record structure will be bypassed.</long_desc>
		</bitfield>
		<bitfield name="OTPM_EXPR_ECC_BYPASS">
			<long_desc>When set the ECC logic will be bypassed.</long_desc>
		</bitfield>
		<bitfield name="OTPM_EXPR_DISABLE_AUTO_RAM_LOAD">
			<long_desc>Disable automatic RAM load for record types supporting RAM load.</long_desc>
		</bitfield>
		<bitfield name="OTPM_EXPR_TRIGGER_AUTO_RAM_LOAD">
			<long_desc>Interprete the current content of the otpm_data* as a register upload record and upload it to registers.</long_desc>
		</bitfield>
	</reg>
	<reg name="GREEN1_GAIN">
		<long_desc>Digital gain for Green1 (Gr) pixels in Context A, in format of xxxx.yyyyyyy.</long_desc>
	</reg>
	<reg name="BLUE_GAIN">
		<long_desc>Digital gain for Blue pixels, in format of xxxx.yyyyyyy.</long_desc>
	</reg>
	<reg name="RED_GAIN">
		<long_desc>Digital gain for Red pixels,  in format of xxxx.yyyyyyy.</long_desc>
	</reg>
	<reg name="GREEN2_GAIN">
		<long_desc>Digital gain for Green2 (Gb) pixels in Context A,in format of xxxx.yyyyyyy.</long_desc>
	</reg>
	<reg name="GLOBAL_GAIN">
		<long_desc>This register is a shortcut register for writing all four color digital gains at once.  Writing to this register will write the same value to green1_, blue_, red_, and green2_gain digital gain registers.  Reading this register will return the value in the green1_gain digital gain register.  This digital gain register is used in the pre-HDR gain block if enabled or the post-HDR gain block in the 1st gain stage.</long_desc>
	</reg>
	<reg name="ANALOG_COLOR_GAIN_T1">
		<long_desc>Analog color gain for T1 exposure.</long_desc>
		<bitfield name="ANALOG_COLOR_GAIN_GR1_T1">
			<long_desc>Analog green1 gain for T1 exposure.</long_desc>
		</bitfield>
		<bitfield name="ANALOG_COLOR_GAIN_RED_T1">
			<long_desc>Analog red gain for T1 exposure.</long_desc>
		</bitfield>
		<bitfield name="ANALOG_COLOR_GAIN_BLU_T1">
			<long_desc>Analog blue gain for T1 exposure.</long_desc>
		</bitfield>
		<bitfield name="ANALOG_COLOR_GAIN_GR2_T1">
			<long_desc>Analog green2 gain for T1 exposure.</long_desc>
		</bitfield>
	</reg>
	<reg name="SMIA_TEST">
		<long_desc>smia test</long_desc>
		<bitfield name="SMIA_TEST_STATS_ROW_START_GB">
			<long_desc>Enables statisitics collection of green_blue row</long_desc>
		</bitfield>
		<bitfield name="SMIA_TEST_EMBEDDED_STATS_EN">
			<long_desc>0: Embedded statistics are not transmitted on the 2 stats rows after the frame pixel data. 1: Embedded statistics are transmitted on the 2 stats data rows after the frame pixel data.</long_desc>
		</bitfield>
		<bitfield name="SMIA_TEST_EMBEDDED_DATA_EN">
			<long_desc>0: Frames out of the sensor exclude the embedded data.  1: Frames of data out of the sensor include 2 rows of embedded data.  This register field should only be change while the sensor is in software standby.  Disabling the embedded data will not reduce the number of vertical blanking rows.</long_desc>
		</bitfield>
		<bitfield name="SMIA_TEST_PLL_BYPASS">
			<long_desc>0: Normal operation  1: Bypass the PLL VCO so that EXTCLK drives the PLL output clock divisors. In order to perform any repeatable phase-accurate testing, the PLL must be bypassed:  either implicitly (by remaining in standby mode) or explicitly by setting this bit.</long_desc>
		</bitfield>
		<bitfield name="SMIA_TEST_PLL_LOCK_MODE">
			<long_desc>Control signals for PLL lock mode input of PLL.</long_desc>
		</bitfield>
		<bitfield name="FORCE_SYS_CORE_RDY">
			<long_desc>When bit is set, the sys_core_rdy port of the MIPI/HISPI TX block is forced high.</long_desc>
		</bitfield>
		<bitfield name="SMIA_TEST_STATS_NROW">
			<long_desc>1: 4 stats rows 0: 2 stats rows</long_desc>
		</bitfield>
		<bitfield name="SMIA_TEST_EMBED_NROW">
			<long_desc>1: 4 embed rows 0: 2 embed rows</long_desc>
		</bitfield>
	</reg>
	<reg name="CTX_WR_DATA_REG">
		<long_desc>context write data </long_desc>
	</reg>
	<reg name="DATAPATH_SELECT">
		<long_desc>Contains bitfields that affects the data path</long_desc>
		<bitfield name="DATAPATH_SELECT_LINE_VALID">
			<long_desc>00: Normal behavior of LINE_VALID  01: LINE_VALID is driven continuously (continue generating LINE_VALID during vertical blanking)  10: LINE_VALID is driven continuously as LINE_VALID XOR FRAME_VALID  11: Reserved.</long_desc>
		</bitfield>
		<bitfield name="IME_MODE">
			<long_desc>Enables IME_MODE which changes the number of data paths in use in the output data path for higher throughput, especially in line interleave mode.  Some features are not available in IME mode, such as cursor, scaler, statistics, and LUT companding.</long_desc>
		</bitfield>
		<bitfield name="SCALER_TRUE_BAYER">
			<long_desc>Enables true Bayer scaling mode.</long_desc>
		</bitfield>
		<bitfield name="SCALER_SUM2X2">
			<long_desc>Enables sum 2x2 scaling mode.</long_desc>
		</bitfield>
		<bitfield name="AE_HIST_LOG_BINS_ENABLE">
			<long_desc>enables logarithmic histograms</long_desc>
		</bitfield>
		<bitfield name="PAR_HIDRV_EN">
			<long_desc>Enable additional driver units for 1.8V VDDIO supply for Parallel I/O.  1: Must be used when VDDIO is 1.8V.  0: Must be used when VDDIO is 2.8V. </long_desc>
		</bitfield>
		<bitfield name="SLEW_B">
			<long_desc>slew control for pixclk</long_desc>
		</bitfield>
		<bitfield name="SLEW_A">
			<long_desc>slew control for parallel port</long_desc>
		</bitfield>
	</reg>
	<reg name="TEST_PATTERN_MODE_">
		<long_desc>0: Normal operation. Generate output data from pixel array   1: Solid color test pattern.   2: Full color bar test pattern.   3: Fade to grey color bar test pattern   4: PN9 test pattern 256: Marching 1 test pattern (12 bit) Other: Reserved.</long_desc>
	</reg>
	<reg name="TEST_DATA_RED_">
		<long_desc>The value for red pixels in the Bayer data used for the solid color test pattern and the test cursors.</long_desc>
	</reg>
	<reg name="TEST_DATA_GREENR_">
		<long_desc>The value for green pixels in red/green rows of the Bayer data used for the solid color test pattern and the test cursors.</long_desc>
	</reg>
	<reg name="TEST_DATA_BLUE_">
		<long_desc>The value for blue pixels in the Bayer data used for the solid color test pattern and the test cursors.</long_desc>
	</reg>
	<reg name="TEST_DATA_GREENB_">
		<long_desc>The value for green pixels in blue/green rows of the Bayer data used for the solid color test pattern and the test cursors.</long_desc>
	</reg>
	<reg name="TEST_RAW_MODE">
		<long_desc>Contains bitfields for controlling RAW data mode where corrections and pedestal are turned off</long_desc>
		<bitfield name="RAW_DATA">
			<long_desc>Enable this bit to turn off all corrections.</long_desc>
		</bitfield>
		<bitfield name="TEST_PATTERN_OVERRIDE">
			<long_desc>Prevents test_pattern from turning off corrections.  By default the test patterns will disable corrections and pedestals.  If set, the corrections will be enabled.</long_desc>
		</bitfield>
	</reg>
	<reg name="OPERATION_MODE_CTRL">
		<long_desc>operation mode control</long_desc>
		<bitfield name="OPERATION_MODE_CTRL_SEQUENCE_CODE">
			<long_desc>Should always be 00 to select the HDR sequencer.</long_desc>
		</bitfield>
		<bitfield name="OPERATION_MODE_CTRL_NUM_EXP">
			<long_desc>Sets the number of exposures to num_exp + 1.</long_desc>
		</bitfield>
		<bitfield name="OPERATION_MODE_CTRL_LIM_MODE">
			<long_desc>Enables Line Interleave Mode.</long_desc>
		</bitfield>
		<bitfield name="OPERATION_MODE_CTRL_LICM_MODE">
			<long_desc>Line Interleave Combo Mode. Used only when num_exp is more than 1.</long_desc>
		</bitfield>
		<bitfield name="OPERATION_MODE_CTRL_LFM_MODE">
			<long_desc>Enables LED Flicker Mitigation Mode.</long_desc>
		</bitfield>
		<bitfield name="OPERATION_MODE_CTRL_MONOCHROME_MODE">
			<long_desc>enable monochrome mode</long_desc>
		</bitfield>
	</reg>
	<reg name="OPERATION_MODE_CTRL_CB">
		<long_desc>Operation mode control bitfields for Context B</long_desc>
		<bitfield name="OPERATION_MODE_CTRL_SEQUENCE_CODE_CB">
			<long_desc>Should always be 00 to select the HDR sequencer.</long_desc>
		</bitfield>
		<bitfield name="OPERATION_MODE_CTRL_NUM_EXP_CB">
			<long_desc>Sets the Context B number of exposures to num_exp + 1.</long_desc>
		</bitfield>
		<bitfield name="OPERATION_MODE_CTRL_LIM_MODE_CB">
			<long_desc>Enables Line Interleave Mode for  Context B</long_desc>
		</bitfield>
		<bitfield name="OPERATION_MODE_CTRL_LICM_MODE_CB">
			<long_desc>Enables Line Interleave Combo Mode. Used only when num_exp is more than 1 for Context B.</long_desc>
		</bitfield>
		<bitfield name="OPERATION_MODE_CTRL_LFM_MODE_CB">
			<long_desc>Enables LED Flicker Mitigation Mode for Context B</long_desc>
		</bitfield>
	</reg>
	<reg name="PARK_ROW_ADDR">
		<long_desc>Sets the address sent to the row decoder for non physical rows such as DTR and vertical blanking rows.</long_desc>
	</reg>
	<reg name="LFM_CTRL">
		<long_desc>LFM control register</long_desc>
		<bitfield name="LFM_EVEN">
			<long_desc>LFM even</long_desc>
		</bitfield>
		<bitfield name="LFM_GATECLK">
			<long_desc>LFM gate clock</long_desc>
		</bitfield>
		<bitfield name="LFM_FH_MODE">
			<long_desc>LFM full height mode</long_desc>
		</bitfield>
		<bitfield name="LFM_HDR_MODE">
			<long_desc>LFM full height mode configuration</long_desc>
		</bitfield>
		<bitfield name="COL_XFER_DLY">
			<long_desc>Column transfer delay</long_desc>
		</bitfield>
	</reg>
	<reg name="X_ADDR_START_CB">
		<long_desc>X_ADDR_START for context B</long_desc>
	</reg>
	<reg name="Y_ADDR_START_CB">
		<long_desc>Y_ADDR_START for context B</long_desc>
	</reg>
	<reg name="X_ADDR_END_CB">
		<long_desc>X_ADDR_END for context B</long_desc>
	</reg>
	<reg name="Y_ADDR_END_CB">
		<long_desc>Y_ADDR_END for context B</long_desc>
	</reg>
	<reg name="ROW_NOISE_CONTROL">
		<long_desc>row noise control register</long_desc>
	</reg>
	<reg name="X_ODD_INC_">
		<long_desc>1: No skip. 3: Skip 2. Other values are not supported.</long_desc>
	</reg>
	<reg name="Y_ODD_INC_">
		<long_desc>1: No skip. 3: Skip 2. Other values are not supported.</long_desc>
	</reg>
	<reg name="Y_ODD_INC_CB">
		<long_desc>Y_ODD_INC for context B</long_desc>
	</reg>
	<reg name="FRAME_LENGTH_LINES_CB">
		<long_desc>FRAME_LENGTH_LINES for context B. See description for R0x300A</long_desc>
	</reg>
	<reg name="X_ODD_INC_CB">
		<long_desc>X_ODD_INC for context B</long_desc>
	</reg>
	<reg name="DIGITAL_TEST">
		<long_desc>contains bitfields for different digital functions</long_desc>
		<bitfield name="T1_DIGITAL_GAIN_REG_EN">
			<long_desc>Uses the post HDR gain registers as pre HDR T1 digital gains.  The registers take on the format of the other pre HDR gain registers.</long_desc>
		</bitfield>
		<bitfield name="PIXCLK_ON">
			<long_desc>When set the parallel output PIXCLK will continue to toggle irrespective of standby mode.</long_desc>
		</bitfield>
		<bitfield name="GAIN_DITHER_CONTINUOUS_LFSR">
			<long_desc>Changes the digital gain dither to continuous instead of resetting every frame.</long_desc>
		</bitfield>
		<bitfield name="CONTEXT_B">
			<long_desc>Context Select. 0: Use Context A 1: Use Context B</long_desc>
		</bitfield>
		<bitfield name="PLL_COMPLETE_BYPASS">
			<long_desc>0: PLL is enabled 1: PLL is bypassed.  EXTCLK will be used.  Note that the serial interface does not function when PLL is bypassed.</long_desc>
		</bitfield>
		<bitfield name="DB_DITHER_CONTINUOUS_LFSR">
			<long_desc>Changes the delay buffer decompression dither to continuous instead of resetting every frame.</long_desc>
		</bitfield>
	</reg>
	<reg name="TEMPSENS0_CTRL_REG">
		<long_desc>top temperature sensor control register</long_desc>
		<bitfield name="TEMP0_POWER_ON">
			<long_desc>set to enable top temperature sensor</long_desc>
		</bitfield>
		<bitfield name="TEMP0_START_CONV_STRM">
			<long_desc>set to enable conversions in streaming mode in top temperature sensor</long_desc>
		</bitfield>
		<bitfield name="TEMP0_START_CONV_STBY">
			<long_desc>set to enable conversions in standby mode in top temperature sensor</long_desc>
		</bitfield>
		<bitfield name="TEMP0_CLEAR_VALUE">
			<long_desc>set to clear the tempsens0_data register, the last captured temperature data from top temperature sensor</long_desc>
		</bitfield>
		<bitfield name="TEMP0_YELLOW_FLAG_EN">
			<long_desc>set to enable yellow flag  in tempvsens0_status register</long_desc>
		</bitfield>
		<bitfield name="TEMP0_RED_FLAG_EN">
			<long_desc>set to enable red flag in tempvsens0_status register</long_desc>
		</bitfield>
		<bitfield name="RETRIGGER0_THRSHOLD">
			<long_desc>top temperature sensor temperature threshold that will trigger DBLC on temperature change</long_desc>
		</bitfield>
	</reg>
	<reg name="TEMPSENS1_CTRL_REG">
		<long_desc>bottom temperature sensor control register</long_desc>
		<bitfield name="TEMP1_POWER_ON">
			<long_desc>set to enable bottom temperature sensor</long_desc>
		</bitfield>
		<bitfield name="TEMP1_START_CONV_STRM">
			<long_desc>set to enable conversions in streaming mode in btm temperature sensor</long_desc>
		</bitfield>
		<bitfield name="TEMP1_START_CONV_STBY">
			<long_desc>set to enable conversions in standby mode in btm temperature sensor</long_desc>
		</bitfield>
		<bitfield name="TEMP1_CLEAR_VALUE">
			<long_desc>set to clear the tempsens1_data register, the last captured temperature data from bottom temperature sensor</long_desc>
		</bitfield>
		<bitfield name="TEMP1_YELLOW_FLAG_EN">
			<long_desc>set to enable yellow flag  in tempvsens1_status register</long_desc>
		</bitfield>
		<bitfield name="TEMP1_RED_FLAG_EN">
			<long_desc>set to enable red flag in tempvsens1_status register</long_desc>
		</bitfield>
		<bitfield name="RETRIGGER1_THRSHOLD">
			<long_desc>bottom temperature sensor temperature threshold that will trigger DBLC on temperature change</long_desc>
		</bitfield>
	</reg>
	<reg name="DIGITAL_CTRL">
		<long_desc>digital control</long_desc>
		<bitfield name="NUM_EXP_MAX">
			<long_desc>This field is set to the maximum exposure modes used when different context exposure modes are used. This will determine the minimum line_length_pck required.</long_desc>
		</bitfield>
		<bitfield name="LFM_AB_SKIP0">
			<long_desc>lfm_AB_skip0</long_desc>
		</bitfield>
		<bitfield name="LFM_AB_SKIP1">
			<long_desc>lfm_AB_skip1</long_desc>
		</bitfield>
		<bitfield name="DECOMP_DITHER_EN">
			<long_desc>Enable decompression dither of the T1, T2 and T3 delay buffers</long_desc>
		</bitfield>
		<bitfield name="NLFM_AB_SKIP0">
			<long_desc>nlfm_AB_skip0</long_desc>
		</bitfield>
		<bitfield name="NLFM_AB_SKIP1">
			<long_desc>nlfm_AB_skip1</long_desc>
		</bitfield>
		<bitfield name="SET_PARK_ROW">
			<long_desc>set_park_row</long_desc>
		</bitfield>
		<bitfield name="LFM_EXP_RETRIGGER_EN">
			<long_desc>lfm_exp_retrigger_en</long_desc>
		</bitfield>
		<bitfield name="ANA_PWR_ON">
			<long_desc>When set, enable analog power on even if stream bit is set to 0.</long_desc>
		</bitfield>
		<bitfield name="EXTRA_DELAY_DIST">
			<long_desc>When set, the extra delay set in register EXTRA_DELAY is distributed 1 clock cycle for each row, instead of adding the extra delay only at the last row of the frame.</long_desc>
		</bitfield>
	</reg>
	<reg name="GREEN1_GAIN_CB">
		<long_desc>Digital gain for Green1 (Gr) pixels in Context B, in format of xxxx.yyyyyyy.</long_desc>
	</reg>
	<reg name="BLUE_GAIN_CB">
		<long_desc>Digital gain for Blue pixels in Context B, in format of xxxx.yyyyyyy.</long_desc>
	</reg>
	<reg name="RED_GAIN_CB">
		<long_desc>Digital gain for Red pixels in Context B,  in format of xxxx.yyyyyyy.</long_desc>
	</reg>
	<reg name="GREEN2_GAIN_CB">
		<long_desc>Digital gain for Green2 (Gb) pixels in Context B, in format of xxxx.yyyyyyy.</long_desc>
	</reg>
	<reg name="GLOBAL_GAIN_CB">
		<long_desc>This register is a shortcut register for writing all four color gains at once.  It works similarly to global_gain.</long_desc>
	</reg>
	<reg name="TEMPSENS0_CALIB1">
		<long_desc>top temperature sensor calibrated temperature code</long_desc>
	</reg>
	<reg name="TEMPSENS0_CALIB2">
		<long_desc>top temperature sensor calibrated temperature code</long_desc>
	</reg>
	<reg name="TEMPSENS1_CALIB1">
		<long_desc>bottom temperature sensor calibrated temperature code</long_desc>
	</reg>
	<reg name="TEMPSENS1_CALIB2">
		<long_desc>bottom temperature sensor calibrated temperature code</long_desc>
	</reg>
	<reg name="GRR_CONTROL1">
		<long_desc>grr control register 1</long_desc>
		<bitfield name="LINE_SYNC_MODE">
			<long_desc>Line Sync Mode.</long_desc>
		</bitfield>
		<bitfield name="SLAVE_MODE">
			<long_desc>1: The start of sensor readout will be synchronized with the external trigger (applied to pad TRIGGER). </long_desc>
		</bitfield>
		<bitfield name="FRAME_START_MODE">
			<long_desc>This bit controls the frame timing of the first frame when entering stream mode (or trigger mode). When low, the integration time is started and  then readout begins. It means that the first frame will start after a delay equal to CIT. When high, a frame time is started and at the appropriate time point, the integration starts. It means that the first frame will start affer one frame time.</long_desc>
		</bitfield>
		<bitfield name="SLAVE_SH_SYNC_MODE">
			<long_desc>Also called SURROUND VIEW mode. When set and the sensor is set to stream mode, it waits for an external trigger signal. When a trigger is received, a time interval of frame length lines is started. The shutter pointers are started at appropriate point and when this time interval is finished, the read out is started. The external trigger period must not be less than frame length lines, otherwise the triggers happening during the time interval will be ignored.</long_desc>
		</bitfield>
	</reg>
	<reg name="TRIGGER_DELAY">
		<long_desc>trigger delay register</long_desc>
		<bitfield name="TRIGGER_DELAY_TRIGGER_DELAY_MODE">
			<long_desc>trigger delay mode</long_desc>
		</bitfield>
		<bitfield name="TRIGGER_DELAY_TRIGGER_DELAY">
			<long_desc>delay trigger pulse by number of pixel clock when trigger delay mode is set.</long_desc>
		</bitfield>
	</reg>
	<reg name="NOISE_PEDESTAL">
		<long_desc>Pedestal value added prior to delay buffer</long_desc>
		<bitfield name="NOISE_PEDESTAL_LEVEL">
			<long_desc>Pedestal value added prior to delay buffer</long_desc>
		</bitfield>
		<bitfield name="NOISE_PEDESTAL_ATR">
			<long_desc>Apply noise pedestal to ATR rows</long_desc>
		</bitfield>
	</reg>
	<reg name="DLO_CONTROL0">
		<long_desc>Contains bitfields for the control of DLO function</long_desc>
		<bitfield name="NCC_ENABLE">
			<long_desc>enable the NCC function</long_desc>
		</bitfield>
	</reg>
	<reg name="OTPM_TCFG_WRITE_01">
		<long_desc>Refer to the OTPM documentation</long_desc>
	</reg>
	<reg name="OTPM_TCFG_WRITE_23">
		<long_desc>Refer to the OTPM documentation</long_desc>
	</reg>
	<reg name="OTPM_TCFG_READ_01">
		<long_desc>Refer to the OTPM documentation</long_desc>
	</reg>
	<reg name="OTPM_TCFG_READ_23">
		<long_desc>Refer to the OTPM documentation</long_desc>
	</reg>
	<reg name="OTPM_TCFG_OPT">
		<long_desc>otpm timing configuration options</long_desc>
		<bitfield name="OTPM_TIMER_CODE">
			<long_desc>sets the internal data latch timing</long_desc>
		</bitfield>
		<bitfield name="OTPM_DIV4">
			<long_desc>sets  internal clock divide by 4</long_desc>
		</bitfield>
	</reg>
	<reg name="OTPM_DATA_MANUAL_L">
		<long_desc>Refer to the OTPM documentation</long_desc>
	</reg>
	<reg name="OTPM_DATA_MANUAL_H">
		<long_desc>Refer to the OTPM documentation</long_desc>
	</reg>
	<reg name="OTPM_DATA_MANUAL_EXTRA">
		<long_desc>Refer to the OTPM documentation</long_desc>
	</reg>
	<reg name="AE_ROI_X_START_OFFSET">
		<long_desc>ROI-1: Number of pixels skipped in each row before the ROI starts</long_desc>
	</reg>
	<reg name="AE_ROI_Y_START_OFFSET">
		<long_desc>ROI-1: Number of pixels skipped in each frame before the ROI starts</long_desc>
	</reg>
	<reg name="AE_ROI_X_SIZE">
		<long_desc>ROI-1: Number of columns in the ROI</long_desc>
	</reg>
	<reg name="AE_ROI_Y_SIZE">
		<long_desc>ROI-1: Number of  rows in the ROI</long_desc>
	</reg>
	<reg name="AE_HIST_BEGIN_PERC">
		<long_desc>ROI-1: Defines the percentage of Gr pixels that must have values below hist_begin. Specified as a number &lt; 1 = 0.xx...xx</long_desc>
	</reg>
	<reg name="AE_HIST_END_PERC">
		<long_desc>ROI-1: Defines the percentage of Gr pixels that must have values below hist_end. Specified as a number &lt; 1 = 0.xx...xx. A value of all 1s is treated as a special case and equates to 1.0 (100%)</long_desc>
	</reg>
	<reg name="AE_HIST_DIV">
		<long_desc>ROI-1: Defines the point at which the histogram is divided into  the low and high end. Boundary value = hist_div*16</long_desc>
	</reg>
	<reg name="AE_NORM_WIDTH_MIN">
		<long_desc>ROI-1: Defines the minimum histogram width normalization factor (=norm_width_min*16), for norm_abs_dev calculation. A value of all 1s turns off the norm_width_min option ie. all absolute deviation is normalized by hist_end - hist_begin</long_desc>
	</reg>
	<reg name="DATA_FORMAT_BITS">
		<long_desc>sets the data format widths</long_desc>
		<bitfield name="DATA_FORMAT_OUTPUT">
			<long_desc>Sets the output size.  Legal values are 10, 12, 14, 16, or 20.</long_desc>
		</bitfield>
		<bitfield name="DATA_FORMAT_RAW">
			<long_desc>Sets the adc or hdr data size.  Legal values are 12, 14, 16, 18, 20.</long_desc>
		</bitfield>
		<bitfield name="PARALLEL_MSB_SHIFT">
			<long_desc>parallel_msb_shift</long_desc>
		</bitfield>
	</reg>
	<reg name="SERIAL_FORMAT">
		<long_desc>Sets the serial format and the number of lanes.</long_desc>
		<bitfield name="SERIAL_FORMAT_LANES">
			<long_desc>The number of active serial lanes: 1, 2, or 4.</long_desc>
		</bitfield>
		<bitfield name="SERIAL_FORMAT_TYPE">
			<long_desc>2: mipi.  0, 1, or 3: hispi.</long_desc>
		</bitfield>
	</reg>
	<reg name="FRAME_PREAMBLE">
		<long_desc>frame preamble This timing value, expressed in op_pix_clk periods, must be large enough to allow the MIPI wakeup and start-of-frame short packet to be transmitted prior to the start of a frame of pixel data. The default value should be correct for most applications. Too small a value will result in an INSUFFICIENT_FRAME_PREAMBLE error being flagged in the DATAPATH_STATUS register. Legal values:  [0, 255].</long_desc>
	</reg>
	<reg name="LINE_PREAMBLE">
		<long_desc>line preamble This timing value, expressed in op_pix_clk periods, must be large enough to allow the MIPI long packet header to be transmitted prior to the start of a line of pixel data. The default value should be correct for most applications. Too small a value will result in an INSUFFICIENT_LINE_PREAMBLE error being flagged in the DATAPATH_STATUS register. Legal values:  [0, 255].</long_desc>
	</reg>
	<reg name="MIPI_CONFIG_STATUS">
		<long_desc>Serial configuration and status</long_desc>
		<bitfield name="FRAME_CNT_EN">
			<long_desc>Enables MIPI frame counting function</long_desc>
		</bitfield>
		<bitfield name="FRAME_CNT_RST">
			<long_desc>Resets the MIPI frame counting function</long_desc>
		</bitfield>
		<bitfield name="HISPI_PHY_MODE">
			<long_desc>Sets the hispi signalling mode: 00 - Hi-VCM 01 - SLVS with external regulator 10 - SubLVDS </long_desc>
		</bitfield>
	</reg>
	<reg name="HISPI_CONTROL">
		<long_desc>Contains bitfields for the hispi controls</long_desc>
		<bitfield name="VERT_LEFT_BAR_EN">
			<long_desc>When asserted one word of 0x0001 is transmitted between the last word of the SO* sync code and the first image data word in each lane</long_desc>
		</bitfield>
		<bitfield name="MSB_FIRST">
			<long_desc>Enables MSB to be placed first in the data stream.  This applies to data only and not sync codes.</long_desc>
		</bitfield>
		<bitfield name="STREAMING_MODE_EN">
			<long_desc>For hispiSP and ActiveStart-SP8 and SP8+: 0 - packetized format, 1 - streaming format</long_desc>
		</bitfield>
		<bitfield name="BLANKING_DATA_EN">
			<long_desc>0 - blanking data is set to the default value specified by the selected protocol. 1 - For hispiSP and ActiveStart-SP8, use the hispi_blanking register.</long_desc>
		</bitfield>
		<bitfield name="HISPI_MODE">
			<long_desc>Hispi protocol: 00b - hispiS, 01b - hispiSP, 10b - ActiveStart-SP8 and SP8+, 11b - invalid</long_desc>
		</bitfield>
		<bitfield name="TRANSMIT_CHECKSUM">
			<long_desc>when asserted a checksum is appended to each line of hispi data except in 8-bit mode.</long_desc>
		</bitfield>
		<bitfield name="MASK_FRAMER_STANDBY">
			<long_desc>When asserted, prevents the phy from going to a standby state.</long_desc>
		</bitfield>
	</reg>
	<reg name="COMPANDING">
		<long_desc>When set this will enable companding</long_desc>
		<bitfield name="COMPANDING_ENABLE">
			<long_desc>companding enable</long_desc>
		</bitfield>
		<bitfield name="KNEE_POINT_SEL">
			<long_desc>Selects between the old 20-&gt; legacy compander kneepoint and a slightly better new kneepoint.</long_desc>
		</bitfield>
	</reg>
	<reg name="STAT_FRAME_ID">
		<long_desc>User programmable Stats Frame ID , Transferred in the first line of stats along with frame-count</long_desc>
	</reg>
	<reg name="I2C_WRT_CHECKSUM">
		<long_desc>Checksum of I2C write operations. Writing will initialize to 0xFFFF</long_desc>
	</reg>
	<reg name="PIX_DEF_ID">
		<long_desc>contains bitfield associated with pixel defect correction</long_desc>
		<bitfield name="PIX_DEF_ID_EN">
			<long_desc>Enable pixel defect correction.</long_desc>
		</bitfield>
		<bitfield name="PIX_DEF_ID_MODE">
			<long_desc>Mode of pixel defect correction. 0: Tags bad pixels with the reserved value 0. 1:  Corrects bad pixels using the traditional 1D correction scheme.</long_desc>
		</bitfield>
	</reg>
	<reg name="CUSTOMER_REV">
		<long_desc>customer revision register</long_desc>
	</reg>
	<reg name="COARSE_INTEGRATION_TIME2">
		<long_desc>Integration time specified in multiples of line_length_pck_ for T2 exposure when x3238[15] is set.</long_desc>
	</reg>
	<reg name="COARSE_INTEGRATION_TIME2_CB">
		<long_desc>Context_B Integration time specified in multiples of line_length_pck_ for T2 exposure when x323a[15] is set</long_desc>
	</reg>
	<reg name="COARSE_INTEGRATION_TIME3">
		<long_desc>Integration time specified in multiples of line_length_pck_ for T3 exposure when x3238[15] is set.</long_desc>
	</reg>
	<reg name="COARSE_INTEGRATION_TIME3_CB">
		<long_desc>Context_B Integration time specified in multiples of line_length_pck_ for T3 exposure when x323a[15] is set</long_desc>
	</reg>
	<reg name="COARSE_INTEGRATION_TIME4">
		<long_desc>Integration time specified in multiples of line_length_pck_ for T4 exposure when x3238[15] is set.</long_desc>
	</reg>
	<reg name="COARSE_INTEGRATION_TIME4_CB">
		<long_desc>Context_B Integration time specified in multiples of line_length_pck_ for T4 exposure when x323a[15] is set</long_desc>
	</reg>
	<reg name="FINE_INTEGRATION_TIME2">
		<long_desc>Sub-row Integration time specified in number of pixel clocks for T2 exposure.</long_desc>
	</reg>
	<reg name="FINE_INTEGRATION_TIME2_CB">
		<long_desc>Context B sub-row Integration time specified in number of pixel clocks for T2 exposure.</long_desc>
	</reg>
	<reg name="FINE_INTEGRATION_TIME3">
		<long_desc>Sub-row Integration time specified in number of pixel clocks for T3 exposure.</long_desc>
	</reg>
	<reg name="FINE_INTEGRATION_TIME3_CB">
		<long_desc>Context B sub-row Integration time specified in number of pixel clocks for T3 exposure.</long_desc>
	</reg>
	<reg name="FINE_INTEGRATION_TIME4">
		<long_desc>Sub-row Integration time specified in number of pixel clocks for T4 exposure.</long_desc>
	</reg>
	<reg name="FINE_INTEGRATION_TIME4_CB">
		<long_desc>Context B sub-row Integration time specified in number of pixel clocks for T4 exposure.</long_desc>
	</reg>
	<reg name="FINE_CORRECTION">
		<long_desc>Adjustment for T1 exposure fine integration time. Fixed for a specified sequencer code.</long_desc>
	</reg>
	<reg name="FINE_CORRECTION2">
		<long_desc>Adjustment for T2 exposure fine integration time. Fixed for a specified sequencer code.</long_desc>
	</reg>
	<reg name="FINE_CORRECTION3">
		<long_desc>Adjustment for T3 exposure fine integration time. Fixed for a specified sequencer code.</long_desc>
	</reg>
	<reg name="FINE_CORRECTION4">
		<long_desc>Adjustment for T4 exposure fine integration time. Fixed for a specified sequencer code.</long_desc>
	</reg>
	<reg name="EXPOSURE_RATIO">
		<long_desc>Exposure ratio register for context A.  With use_reg=0, T2=coarse_integration_time_ / 2^ratio_t1_t2, T3 = T2 / 2^ratio_t2_t3, and T4 = T3 / 2 ^ ratio_t3_t4.  With use_reg=1 (flexible exposures), exposure are set from coarse_integration_time_, coarse_integration_time2, coarse_integration_time3, and coarse_integration_time4.</long_desc>
		<bitfield name="EXPOSURE_RATIO_RATIO_T1_T2">
			<long_desc>Context A.  Set T2 exposure based on T1 exposure and this ratio when use_reg is 0.</long_desc>
		</bitfield>
		<bitfield name="EXPOSURE_RATIO_RATIO_T2_T3">
			<long_desc>Context A.  Set T3 exposure based on T2 exposure and this ratio when use_reg is 0.</long_desc>
		</bitfield>
		<bitfield name="EXPOSURE_RATIO_RATIO_T3_T4">
			<long_desc>Context A.  Set T4 exposure based on T3 exposure and this ratio when use_reg is 0.</long_desc>
		</bitfield>
		<bitfield name="EXPOSURE_RATIO_USE_REG">
			<long_desc>Context A.  Use Coarse_integration_time2, coarse_integration_time3, and coarse_integration_time4 registers when this is set.</long_desc>
		</bitfield>
	</reg>
	<reg name="EXPOSURE_RATIO_CB">
		<long_desc>Exposure ratio register for context B.  With use_reg=0, T2=coarse_integration_time_ / 2^ratio_t1_t2, T3 = T2 / 2^ratio_t2_t3, and T4 = T3 / 2 ^ ratio_t3_t4.  With use_reg=1 (flexible exposures), exposure are set from coarse_integration_time_, coarse_integration_time2, coarse_integration_time3, and coarse_integration_time4.</long_desc>
		<bitfield name="EXPOSURE_RATIO_RATIO_T1_T2_CB">
			<long_desc>Context B.  Set T2 exposure based on T1 exposure and this ratio when use_reg is 0.</long_desc>
		</bitfield>
		<bitfield name="EXPOSURE_RATIO_RATIO_T2_T3_CB">
			<long_desc>Context B.  Set T3 exposure based on T2 exposure and this ratio when use_reg is 0.</long_desc>
		</bitfield>
		<bitfield name="EXPOSURE_RATIO_RATIO_T3_T4_CB">
			<long_desc>Context B.  Set T4 exposure based on T3 exposure and this ratio when use_reg is 0.</long_desc>
		</bitfield>
		<bitfield name="EXPOSURE_RATIO_USE_REG_CB">
			<long_desc>Context B.  Use Coarse_integration_time2_cb, coarse_integration_time3_cb, and coarse_integration_time4_cb registers when this is set.</long_desc>
		</bitfield>
	</reg>
	<reg name="AE_ROI2_X_START_OFFSET">
		<long_desc>ROI-2: Number of pixels dropped in each row before the ROI starts</long_desc>
	</reg>
	<reg name="AE_ROI2_Y_START_OFFSET">
		<long_desc>ROI-2: Number of pixel rows dropped in each frame before the ROI starts</long_desc>
	</reg>
	<reg name="AE_ROI2_X_SIZE">
		<long_desc>ROI-2: Number of columns in the ROI</long_desc>
	</reg>
	<reg name="AE_ROI2_Y_SIZE">
		<long_desc>ROI-2: Number of  rows in the ROI</long_desc>
	</reg>
	<reg name="AE_HIST2_BEGIN_PERC">
		<long_desc>ROI-2: Defines the percentage of Gr pixels that must have values below hist_begin. Specified as a number &lt; 1 = 0.xx...xx</long_desc>
	</reg>
	<reg name="AE_HIST2_END_PERC">
		<long_desc>ROI-2: Defines the percentage of Gr pixels that must have values below hist_end. Specified as a number &lt; 1 = 0.xx...xx. A value of all 1s is treated as a special case and equates to 1.0 (100%)</long_desc>
	</reg>
	<reg name="AE_HIST2_DIV">
		<long_desc>ROI-2: Defines the point at which the histogram is divided into  the low and high end. Boundary value = hist_div*16</long_desc>
	</reg>
	<reg name="AE_NORM2_WIDTH_MIN">
		<long_desc>ROI-2: Defines the minimum histogram width normalization factor (=norm_width_min*16), for norm_abs_dev calculation. A value of all 1s turns off the norm_width_min option ie. all absolute deviation is normalized by hist_end - hist_begin</long_desc>
	</reg>
	<reg name="AE_ROI3_X_START_OFFSET">
		<long_desc>ROI-3: Number of pixels dropped in each row before the ROI starts</long_desc>
	</reg>
	<reg name="AE_ROI3_Y_START_OFFSET">
		<long_desc>ROI-3: Number of pixel rows dropped in each frame before the ROI starts</long_desc>
	</reg>
	<reg name="AE_ROI3_X_SIZE">
		<long_desc>ROI-3: Number of columns in the ROI</long_desc>
	</reg>
	<reg name="AE_ROI3_Y_SIZE">
		<long_desc>ROI-3: Number of  rows in the ROI</long_desc>
	</reg>
	<reg name="AE_HIST3_BEGIN_PERC">
		<long_desc>ROI-3: Defines the percentage of Gr pixels that must have values below hist_begin. Specified as a number &lt; 1 = 0.xx...xx</long_desc>
	</reg>
	<reg name="AE_X1_START_OFFSET">
		<long_desc>Grid-stats: Marks the start of second grid ROI in x-direction.   Selects region x-start to (x-start+x1_offset) for Grid ROI 0/4/8/12</long_desc>
	</reg>
	<reg name="AE_X2_START_OFFSET">
		<long_desc>Grid-stats: Marks the start of third grid ROI in x-direction.   Selects region (x-start+x1_offset) to  (x-start+x1_offset+x2_offset)for Grid ROI 1/5/9/13</long_desc>
	</reg>
	<reg name="AE_X3_START_OFFSET">
		<long_desc>Grid-stats: Marks the start of fourth grid ROI in x-direction.   Selects region (x-start+x1_offset+x2_offset) to (x-start+x1_offset+x2_offset+x3_offset)for Grid ROI 2/6/10/14.   Also sets the region (x-start+x1_offset+x2_offset+x3_offset) to x-end for Grid ROI 3/7/11/15.</long_desc>
	</reg>
	<reg name="AE_Y1_START_OFFSET">
		<long_desc>Grid-stats: Marks the start of second grid ROI in y-direction.  Selects region y-start to (y-start+y1_offset) for Grid ROI 0/1/2/3</long_desc>
	</reg>
	<reg name="AE_Y2_START_OFFSET">
		<long_desc>Grid-stats: Marks the start of third grid ROI in y-direction.   Selects region (y-start+y1_offset) to  (y-start+y1_offset+y2_offset)for Grid ROI 4/5/6/7</long_desc>
	</reg>
	<reg name="AE_Y3_START_OFFSET">
		<long_desc>Grid-stats: Marks the start of fourth grid ROI in y-direction.   Selects region (y-start+y1_offset+y2_offset) to (y-start+y1_offset+y2_offset+y3_offset)for Grid ROI 8/9/10/11.   Also sets the region (y-start+y1_offset+y2_offset+y3_offset) to y-end for Grid ROI 12/13/14/15.</long_desc>
	</reg>
	<reg name="AE_STATS_CONTROL">
		<long_desc>This register along with other registers configures the stats module for operation.</long_desc>
		<bitfield name="AE_COLOR_SEL_ROI1">
			<long_desc>This register along with other registers configures the stats module for operation. ROI-1[1:0]: ae_color_sel_roi1, selects the pixel R/Gr/Gb/B to be sampled.</long_desc>
		</bitfield>
		<bitfield name="EXP_SEL_ROI1">
			<long_desc>This register along with other registers configures the stats module for operation. ROI-1[3:2]: exp_sel_roi1, selects the exposure T1/T2/T3/T4 to be sampled.</long_desc>
		</bitfield>
		<bitfield name="ROW_TYPE_ROI1">
			<long_desc>This register along with other registers configures the stats module for operation. ROI-1[6:4]: row_type_roi1, selects the Row type DTR/ATR/DeltaDk/Active to be sampled</long_desc>
		</bitfield>
		<bitfield name="POSTSCALER_DATA_SEL_ROI1">
			<long_desc>This register along with other registers configures the stats module for operation. ROI-1[7]: postscaler_data_sel_roi1, selects whether to sample the stats data before or after the scaler.</long_desc>
		</bitfield>
		<bitfield name="AE_COLOR_SEL_ROI2">
			<long_desc>This register along with other registers configures the stats module for operation. ROI-2[9:8]: ae_color_sel_roi2, selects the pixel R/Gr/Gb/B to be sampled.</long_desc>
		</bitfield>
		<bitfield name="EXP_SEL_ROI2">
			<long_desc>This register along with other registers configures the stats module for operation. ROI-2[11:10]: exp_sel_roi2, selects the exposure T1/T2/T3/T4 to be sampled.</long_desc>
		</bitfield>
		<bitfield name="ROW_TYPE_ROI2">
			<long_desc>This register along with other registers configures the stats module for operation. ROI-2[14:12]: row_type_roi2, selects the Row type DTR/ATR/DeltaDk/Active to be sampled</long_desc>
		</bitfield>
		<bitfield name="POSTSCALER_DATA_SEL_ROI2">
			<long_desc>This register along with other registers configures the stats module for operation. ROI-2[15]: postscaler_data_sel_roi2, selects whether to sample the stats data before or after the scaler</long_desc>
		</bitfield>
	</reg>
	<reg name="AE_STATS_CONTROL2">
		<long_desc>This register along with other registers configures the stats module for operation.</long_desc>
		<bitfield name="AE_COLOR_SEL_ROI3">
			<long_desc>This register along with other registers configures the stats module for operation. ROI-3[1:0]: ae_color_sel_roi3, selects the pixel R/Gr/Gb/B to be sampled</long_desc>
		</bitfield>
		<bitfield name="EXP_SEL_ROI3">
			<long_desc>This register along with other registers configures the stats module for operation. ROI-3[3:2]: exp_sel_roi3, selects the exposure T1/T2/T3/T4 to be sampled.</long_desc>
		</bitfield>
		<bitfield name="ROW_TYPE_ROI3">
			<long_desc>This register along with other registers configures the stats module for operation. ROI-3[6:4]: row_type_roi3, selects the Row type DTR/ATR/DeltaDk/Active to be sampled.</long_desc>
		</bitfield>
		<bitfield name="POSTSCALER_DATA_SEL_ROI3">
			<long_desc>This register along with other registers configures the stats module for operation. ROI-3[7]: postscaler_data_sel_roi3, selects whether to sample the data before or after the scaler</long_desc>
		</bitfield>
		<bitfield name="AE_COLOR_SEL_GRID">
			<long_desc>This register along with other registers configures the stats module for operation. GRID-ROI[9:8]: ae_color_sel_grid, selects the pixel R/Gr/Gb/B to be sampled.</long_desc>
		</bitfield>
		<bitfield name="EXP_SEL_GRID">
			<long_desc>This register along with other registers configures the stats module for operation. GRID-ROI[11:10]: exp_sel_grid, selects the exposure T1/T2/T3/T4 to be sampled.</long_desc>
		</bitfield>
		<bitfield name="ROW_TYPE_GRID">
			<long_desc>This register along with other registers configures the stats module for operation. GRID-ROI[14:12]: row_type_grid, selects the Row type DTR/ATR/DeltaDk/Active to be sampled</long_desc>
		</bitfield>
		<bitfield name="POSTSCALER_DATA_SEL_GRID">
			<long_desc>This register along with other registers configures the stats module for operation. GRID-ROI[15]: postscaler_data_sel_grid, selects whether to sample the data before or after the scaler</long_desc>
		</bitfield>
	</reg>
	<reg name="ATR_CHECK_CONTROL">
		<long_desc>atr check control register</long_desc>
		<bitfield name="CHECK_EXP_ATR">
			<long_desc>4 bits control which exposures of ATR are checked, in the order {T4,T3,T2,T1}.</long_desc>
		</bitfield>
		<bitfield name="CHECK_EXP_RRC">
			<long_desc>4 bits control which exposures of RRC are checked, in the order {T4,T3,T2,T1}.</long_desc>
		</bitfield>
		<bitfield name="ATR_MT_ALTCOLS">
			<long_desc>This bit causes the memory column test check to alternate the expected value between columns.</long_desc>
		</bitfield>
		<bitfield name="ATR_MT_ALTROWS">
			<long_desc>This bit causes the memory column test check to alternate the expected value between rows.</long_desc>
		</bitfield>
		<bitfield name="ATR_ZT_FIRSTVIS">
			<long_desc>This bit is the exected bright or dark zebra AB pixel value in the Active imaging pixels.</long_desc>
		</bitfield>
		<bitfield name="RRC_CG_CHECK">
			<long_desc>Enables automatic check of the CG column of the Row Rom Columns.</long_desc>
		</bitfield>
	</reg>
	<reg name="ATR_CHECK_ROWTYPES0">
		<long_desc>4 RW registers with 4 4-bit fields each which determine which tests to run on up to 16 ATR rows.  Atr_rowtype_00 determines which (if any) check to run on the first ATR row, etc.  The rowtype fields have the following meanings:     0000 ? off (no check on this row).     0001 ? column rom row.     0010 ? adc memory test 1     0011 ? adc memory test 2     0100 ? overdrive 1     0101 ? overdrive 2     0110 ? zebra AB     0111 ? zebra BA     1000 ? off (reserved for frame counter)     1001 ? off (reserved for gradient)     1010 ? pixout test 1     1011 ? pixout test 2     11xx ? off (no check on this row).</long_desc>
		<bitfield name="ATR_ROWTYPE_00">
			<long_desc>ATR test to run on ATR row 0</long_desc>
		</bitfield>
		<bitfield name="ATR_ROWTYPE_01">
			<long_desc>ATR test to run on ATR row 1</long_desc>
		</bitfield>
		<bitfield name="ATR_ROWTYPE_02">
			<long_desc>ATR test to run on ATR row 2</long_desc>
		</bitfield>
		<bitfield name="ATR_ROWTYPE_03">
			<long_desc>ATR test to run on ATR row 3</long_desc>
		</bitfield>
	</reg>
	<reg name="ATR_CHECK_ROWTYPES1">
		<long_desc>refer to atr_check_rowtypes0 description</long_desc>
		<bitfield name="ATR_ROWTYPE_04">
			<long_desc>ATR test to run on ATR row 4</long_desc>
		</bitfield>
		<bitfield name="ATR_ROWTYPE_05">
			<long_desc>ATR test to run on ATR row 5</long_desc>
		</bitfield>
		<bitfield name="ATR_ROWTYPE_06">
			<long_desc>ATR test to run on ATR row 6</long_desc>
		</bitfield>
		<bitfield name="ATR_ROWTYPE_07">
			<long_desc>ATR test to run on ATR row 7</long_desc>
		</bitfield>
	</reg>
	<reg name="ATR_CHECK_ROWTYPES2">
		<long_desc>refer to atr_check_rowtypes0 description</long_desc>
		<bitfield name="ATR_ROWTYPE_08">
			<long_desc>ATR test to run on ATR row 8</long_desc>
		</bitfield>
		<bitfield name="ATR_ROWTYPE_09">
			<long_desc>ATR test to run on ATR row 9</long_desc>
		</bitfield>
		<bitfield name="ATR_ROWTYPE_10">
			<long_desc>ATR test to run on ATR row 10</long_desc>
		</bitfield>
		<bitfield name="ATR_ROWTYPE_11">
			<long_desc>ATR test to run on ATR row 11</long_desc>
		</bitfield>
	</reg>
	<reg name="ATR_CHECK_ROWTYPES3">
		<long_desc>refer to atr_check_rowtypes0 description</long_desc>
		<bitfield name="ATR_ROWTYPE_12">
			<long_desc>ATR test to run on ATR row 12</long_desc>
		</bitfield>
		<bitfield name="ATR_ROWTYPE_13">
			<long_desc>ATR test to run on ATR row 13</long_desc>
		</bitfield>
		<bitfield name="ATR_ROWTYPE_14">
			<long_desc>ATR test to run on ATR row 14</long_desc>
		</bitfield>
		<bitfield name="ATR_ROWTYPE_15">
			<long_desc>ATR test to run on ATR row 15</long_desc>
		</bitfield>
	</reg>
	<reg name="ATR_CHECK_OT1_LO_THRESH">
		<long_desc>ATR pixels for overdrive test 1 are expected to be higher than this threshold.</long_desc>
	</reg>
	<reg name="ATR_CHECK_OT1_HI_THRESH">
		<long_desc>ATR pixels for overdrive test 1 are expected to be lower than this threshold.</long_desc>
	</reg>
	<reg name="ATR_CHECK_OT2_LO_THRESH">
		<long_desc>ATR pixels for overdrive test 2 are expected to be higher than this threshold.</long_desc>
	</reg>
	<reg name="ATR_CHECK_OT2_HI_THRESH">
		<long_desc>ATR pixels for overdrive test 2 are expected to be lower than this threshold.</long_desc>
	</reg>
	<reg name="ATR_CHECK_ZT_LO_THRESH">
		<long_desc>ATR pixels for zebra tests AB and BA are expected to be lower than this threshold or higher than atr_check_zt_hi_thresh according to the zebra pattern.</long_desc>
	</reg>
	<reg name="ATR_CHECK_ZT_HI_THRESH">
		<long_desc>ATR pixels for zebra tests AB and BA are expected to be higher than this threshold or lower than atr_check_zt_lo_thresh according to the zebra pattern.</long_desc>
	</reg>
	<reg name="ATR_CHECK_MT_EXPECT1">
		<long_desc>One of two expected value registers used for adc memory tests 1 and 2.</long_desc>
	</reg>
	<reg name="ATR_CHECK_MT_EXPECT2">
		<long_desc>One of two expected value registers used for adc memory tests 1 and 2.</long_desc>
	</reg>
	<reg name="ATR_CHECK_PT_LO_THRESH">
		<long_desc>ATR pixels for pixout test 1 are expected to be lower than this threshold.</long_desc>
	</reg>
	<reg name="ATR_CHECK_PT_HI_THRESH">
		<long_desc>ATR pixels for pixout test 2 are expected to be higher than this threshold.</long_desc>
	</reg>
	<reg name="RRC_CHECK_LO_THRESH">
		<long_desc>RRC pixels are deemed dark if lower than this threshold.</long_desc>
	</reg>
	<reg name="RRC_CHECK_HI_THRESH">
		<long_desc>RRC pixels are deemed light if higher than this threshold.</long_desc>
	</reg>
	<reg name="ATR_CHECK_CRT_CRC_EXPECT">
		<long_desc>Expected CRC value from column ROM addresses.</long_desc>
	</reg>
	<reg name="RRC_CHECK_ADDR_CRC_EXPECT">
		<long_desc>Expected CRC value from row ROM addresses.</long_desc>
	</reg>
	<reg name="AE_HIST3_END_PERC">
		<long_desc>ROI-3: Defines the percentage of Gr pixels that must have values below hist_end. Specified as a number &lt; 1 = 0.xx...xx. A value of all 1s is treated as a special case and equates to 1.0 (100%)</long_desc>
	</reg>
	<reg name="AE_HIST3_DIV">
		<long_desc>ROI-3: Defines the point at which the histogram is divided into  the low and high end. Boundary value = hist_div*16</long_desc>
	</reg>
	<reg name="AE_NORM3_WIDTH_MIN">
		<long_desc>ROI-3: Defines the minimum histogram width normalization factor (=norm_width_min*16), for norm_abs_dev calculation. A value of all 1s turns off the norm_width_min option ie. all absolute deviation is normalized by hist_end - hist_begin</long_desc>
	</reg>
	<reg name="DIG_GAIN_GR1">
		<long_desc>Post DLO 2nd stage fine digital gain for Green1 (Gr) pixels in Context A, in format of xx.yyyyyyyyy.</long_desc>
	</reg>
	<reg name="DIG_GAIN_B">
		<long_desc>Post DLO 2nd stage fine digital gain for Blue pixels in Context A, in format of xx.yyyyyyyyy.</long_desc>
	</reg>
	<reg name="DIG_GAIN_R">
		<long_desc>Post DLO 2nd stage fine digital gain for Red pixels in Context A,  in format of xx.yyyyyyyyy.</long_desc>
	</reg>
	<reg name="DIG_GAIN_GR2">
		<long_desc>Post DLO 2nd stage fine digital gain for Green2 (Gb) pixels in Context A,in format of xx.yyyyyyyyy.</long_desc>
	</reg>
	<reg name="DIG_GAIN_GLOBAL">
		<long_desc>Post DLO 2nd stage fine digital gain in format of xx.yyyyyyyyy. Writing a gain to this register is equivalent to writing that code to each of the 4 color-specific gain2 registers. Reading from this register returns the value most recently written to the green1_gain2 register.</long_desc>
	</reg>
	<reg name="DIG_GAIN_GR1_CB">
		<long_desc>Post DLO 2nd stage fine digital gain for Green1 (Gr) pixels in Context B, in format of xx.yyyyyyyyy.</long_desc>
	</reg>
	<reg name="DIG_GAIN_B_CB">
		<long_desc>Post DLO 2nd stage fine digital gain for Blue pixels in Context B, in format of xx.yyyyyyyyy.</long_desc>
	</reg>
	<reg name="DIG_GAIN_R_CB">
		<long_desc>Post DLO 2nd stage fine digital gain for Red pixels in Context B,  in format of xx.yyyyyyyyy.</long_desc>
	</reg>
	<reg name="DIG_GAIN_GR2_CB">
		<long_desc>Post DLO 2nd stage fine digital gain for Green2 (Gb) pixels in Context B,in format of xx.yyyyyyyyy.</long_desc>
	</reg>
	<reg name="DIG_GAIN_GLOBAL_CB">
		<long_desc>Post DLO 2nd stage fine digital gain in format of xx.yyyyyyyyy. Writing a gain to this register is equivalent to writing that code to each of the 4 color-specific gain2 registers. Reading from this register returns the value most recently written to the green1_gain2 register.</long_desc>
	</reg>
	<reg name="OTPM_WRT_CHECKSUM">
		<long_desc>Holds the expected 16 bit OTPM checksum value</long_desc>
	</reg>
	<reg name="IREG_WRT_CHECKSUM">
		<long_desc>Holds the expected 16 bit startup register scan checksum value</long_desc>
	</reg>
	<reg name="PDIM_WRT_CHECKSUM">
		<long_desc>Holds the expected 16 bit PDI memory checksum value</long_desc>
	</reg>
	<reg name="M3ROM_CALC_CHECKSUM">
		<long_desc>Holds the calculated 16 bit M3ROM checksum value</long_desc>
	</reg>
	<reg name="OTPM_CALC_CHECKSUM">
		<long_desc>Holds the calculated 16 bit OTPM checksum value</long_desc>
	</reg>
	<reg name="IREG_CALC_CHECKSUM">
		<long_desc>Holds the calculated 16 bit startup register scan checksum value</long_desc>
	</reg>
	<reg name="PDIM_CALC_CHECKSUM">
		<long_desc>Holds the calculated 16 bit PDI memory checksum value</long_desc>
	</reg>
	<reg name="CRC_CONTROL_REG">
		<long_desc>CRC generation control registers</long_desc>
		<bitfield name="FRAME_ROW_SELECT_CRC">
			<long_desc>0: Parallel line CRCs are calculated on line data and appended at end of line, 1: frame CRCs are calculated on frame data and stored in a register.</long_desc>
		</bitfield>
		<bitfield name="CRC_CONTROL_REG_RESERVED_1">
			<long_desc>reserved</long_desc>
		</bitfield>
		<bitfield name="PROGRESSIVE_ROW_CRC">
			<long_desc>0: Line CRC?s are reset at every line, 1: Line CRC?s are reset at start of frame only</long_desc>
		</bitfield>
		<bitfield name="CRC_CONTROL_REG_RESERVED_2">
			<long_desc>reserved</long_desc>
		</bitfield>
		<bitfield name="FRAME_ROW_CRC_WIDTH">
			<long_desc>Select the width of CRC calculation for Line / Frame CRC?s. 00: 12 bit CRC, 01: 16 bit CRC, 10: 21 bit CRC, 11: Automatically select based on ccp_data_format ? &lt;= 12bit : 12 bit CRC, &lt;= 16bit : 16 bit CRC, else 21 bit CRC.</long_desc>
		</bitfield>
		<bitfield name="CRC_CONTROL_REG_RESERVED_3">
			<long_desc>reserved</long_desc>
		</bitfield>
		<bitfield name="DTR_CRC_BIT_ORDER">
			<long_desc>0: Normal bit order, 1: Swap bit order on calculated DTR 21-bit CRC.</long_desc>
		</bitfield>
		<bitfield name="FRAME_ROW_CRC_BIT_ORDER">
			<long_desc>0: Normal bit order, 1: Swap bit order on calculated frame / line CRC&apos;s</long_desc>
		</bitfield>
		<bitfield name="EMB_REGCHECK_CRC_MASK_EN">
			<long_desc>0: Address map disabled, 1: Enable the address map to exclude registers from embedded CRC</long_desc>
		</bitfield>
		<bitfield name="FRAME_CRC_REGION_SEL">
			<long_desc>[bit 4 (15)]: Select embedded regions, [bit 3 (14)]: Select Statistic regions, [bit 2 (13)]: Select ATR regions, [bit 1 (12)]: Select Active Pixel regions, [bit 0 (11)]: Select Dark data region</long_desc>
		</bitfield>
	</reg>
	<reg name="CRC_EMB_WRT_CHECKSUM">
		<long_desc>Holds the expected 16 bit embedded checksum value</long_desc>
	</reg>
	<reg name="CRC_EMB_CALC_CHECKSUM">
		<long_desc>Holds the calculated 16 bit embedded checksum value</long_desc>
	</reg>
	<reg name="CRC_FR_WRT_CHECKSUM_LOW">
		<long_desc>Holds the expected 16 bit frame/row checksum value</long_desc>
	</reg>
	<reg name="CRC_FR_CALC_CHECKSUM_LOW">
		<long_desc>Holds the calculated 16 bit frame/row checksum value</long_desc>
	</reg>
	<reg name="MIPI_F1_PDT_EDT">
		<long_desc>Sets pixel and embedded mipi data type for exposure 1.  Mipi data type for embedded data in exposure 1 hardcoded to 0x12.</long_desc>
		<bitfield name="MIPI_F1_PDT">
			<long_desc>Mipi data type for pixels in exposure 1.</long_desc>
		</bitfield>
		<bitfield name="MIPI_F1_EDT">
			<long_desc>Not supported.  Mipi data type for embedded data in exposure 1 hardcoded to 0x12.</long_desc>
		</bitfield>
	</reg>
	<reg name="MIPI_F1_VDT_VC">
		<long_desc>Sets blanking mipi data type and the virtual channel for exposure 1.</long_desc>
		<bitfield name="MIPI_F1_VDT">
			<long_desc>Mipi data type for vertical blanking data in exposure 1.</long_desc>
		</bitfield>
		<bitfield name="MIPI_F1_VC">
			<long_desc>Mipi virtual channel for exposure 1.</long_desc>
		</bitfield>
	</reg>
	<reg name="MIPI_F2_PDT_EDT">
		<long_desc>Sets pixel and embedded mipi data type for exposure 2.  Mipi data type for embedded data in exposure 2 hardcoded to 0x12.</long_desc>
		<bitfield name="MIPI_F2_PDT">
			<long_desc>Mipi data type for pixels in exposure 2.</long_desc>
		</bitfield>
		<bitfield name="MIPI_F2_EDT">
			<long_desc>Not supported.  Mipi data type for embedded data in exposure 2 hardcoded to 0x12.</long_desc>
		</bitfield>
	</reg>
	<reg name="MIPI_F2_VDT_VC">
		<long_desc>Sets blanking mipi data type and the virtual channel for exposure 2.</long_desc>
		<bitfield name="MIPI_F2_VDT">
			<long_desc>Mipi data type for vertical blanking data in exposure 2.</long_desc>
		</bitfield>
		<bitfield name="MIPI_F2_VC">
			<long_desc>Mipi virtual channel for exposure 2.</long_desc>
		</bitfield>
	</reg>
	<reg name="MIPI_F3_PDT_EDT">
		<long_desc>Sets pixel and embedded mipi data type for exposure 3.  Mipi data type for embedded data in exposure 3 hardcoded to 0x12.</long_desc>
		<bitfield name="MIPI_F3_PDT">
			<long_desc>Mipi data type for pixels in exposure 3.</long_desc>
		</bitfield>
		<bitfield name="MIPI_F3_EDT">
			<long_desc>Not supported.  Mipi data type for embedded data in exposure 3 hardcoded to 0x12.</long_desc>
		</bitfield>
	</reg>
	<reg name="MIPI_F3_VDT_VC">
		<long_desc>Sets blanking mipi data type and the virtual channel for exposure 3.</long_desc>
		<bitfield name="MIPI_F3_VDT">
			<long_desc>Mipi data type for vertical blanking data in exposure 3.</long_desc>
		</bitfield>
		<bitfield name="MIPI_F3_VC">
			<long_desc>Mipi virtual channel for exposure 3.</long_desc>
		</bitfield>
	</reg>
	<reg name="MIPI_F4_PDT_EDT">
		<long_desc>Sets pixel and embedded mipi data type for exposure 4.  Mipi data type for embedded data in exposure 4 hardcoded to 0x12.</long_desc>
		<bitfield name="MIPI_F4_PDT">
			<long_desc>Mipi data type for pixels in exposure 4.</long_desc>
		</bitfield>
		<bitfield name="MIPI_F4_EDT">
			<long_desc>Not supported.  Mipi data type for embedded data in exposure 4 hardcoded to 0x12.</long_desc>
		</bitfield>
	</reg>
	<reg name="MIPI_F4_VDT_VC">
		<long_desc>Sets blanking mipi data type and the virtual channel for exposure 4.</long_desc>
		<bitfield name="MIPI_F4_VDT">
			<long_desc>Mipi data type for vertical blanking data in exposure 4.</long_desc>
		</bitfield>
		<bitfield name="MIPI_F4_VC">
			<long_desc>Mipi virtual channel for exposure 4.</long_desc>
		</bitfield>
	</reg>
	<reg name="MIPI_DT_VC_CONFIG">
		<long_desc>Mipi data type and virtual channel interleaving config.</long_desc>
		<bitfield name="F2_VC_EN">
			<long_desc>enable f2 virtual channel&apos;s FS and FE packets</long_desc>
		</bitfield>
		<bitfield name="F3_VC_EN">
			<long_desc>enable f3 virtual channel&apos;s FS and FE packets</long_desc>
		</bitfield>
		<bitfield name="F4_VC_EN">
			<long_desc>enable f4 virtual channel&apos;s FS and FE packets</long_desc>
		</bitfield>
		<bitfield name="ENABLE_DT_INTERLEAVING">
			<long_desc>Enables data type and virtual channel interleaving in line interleave mode.</long_desc>
		</bitfield>
		<bitfield name="ENABLE_VB_LINES">
			<long_desc>Enables vertical blanking lines in line interleave mode.</long_desc>
		</bitfield>
	</reg>
	<reg name="I2C_RD_CHECKSUM">
		<long_desc>Checksum of I2C read operations. Writing will initialize to 0xFFFF</long_desc>
	</reg>
	<reg name="CRC_DTR_WRT_CHECKSUM_LOW">
		<long_desc>Holds the expected 21 bit DTR checksum value, bitfield [15:0]</long_desc>
	</reg>
	<reg name="CRC_DTR_CALC_CHECKSUM_LOW">
		<long_desc>Holds the calculated 16 bit DTR checksum value, bitfield[15:0]</long_desc>
	</reg>
	<reg name="CRC_FR_DTR_CALC_CHECKSUM_HIGH">
		<long_desc>Holds the calculated 21 bit dtr and frame/row checksum value, bitfield [21:16]</long_desc>
		<bitfield name="CRC_FR_CALC_CHECKSUM_HIGH">
			<long_desc>Holds the calculated 21 bit frame/row checksum value, bitfield [21:16]</long_desc>
		</bitfield>
		<bitfield name="CRC_DTR_CALC_CHECKSUM_HIGH">
			<long_desc>Holds the alculated 21 bit DTR checksum value, bitfield [21:16]</long_desc>
		</bitfield>
	</reg>
	<reg name="CRC_FR_DTR_WRT_CHECKSUM_HIGH">
		<long_desc>Holds the expected 21 bit dtr and frame/row checksum value, bitfield [21:16]</long_desc>
		<bitfield name="CRC_FR_WRT_CHECKSUM_HIGH">
			<long_desc>Holds the expected 21 bit frame/row checksum value, bitfield [21:16]</long_desc>
		</bitfield>
		<bitfield name="CRC_DTR_WRT_CHECKSUM_HIGH">
			<long_desc>Holds the expected 21 bit DTR checksum value, bitfield [21:16]</long_desc>
		</bitfield>
	</reg>
	<reg name="ANALOG_COLOR_GAIN_T1_CB">
		<long_desc>ContextB B Analog color gain for T1 exposure.</long_desc>
		<bitfield name="ANALOG_COLOR_GAIN_GR1_T1_CB">
			<long_desc>Context B Analog green1 gain for T1 exposure.</long_desc>
		</bitfield>
		<bitfield name="ANALOG_COLOR_GAIN_RED_T1_CB">
			<long_desc>Context B Analog red gain for T1 exposure.</long_desc>
		</bitfield>
		<bitfield name="ANALOG_COLOR_GAIN_BLU_T1_CB">
			<long_desc>Context B Analog blue gain for T1 exposure.</long_desc>
		</bitfield>
		<bitfield name="ANALOG_COLOR_GAIN_GR2_T1_CB">
			<long_desc>Context B Analog green2 gain for T1 exposure.</long_desc>
		</bitfield>
	</reg>
	<reg name="DC_GAIN">
		<long_desc>Conversion Gain Register </long_desc>
		<bitfield name="DC_GAIN_T1">
			<long_desc>Conversion gain for exposure T1. 0: Low Conversion Gain 1: High Conversion Gain</long_desc>
		</bitfield>
		<bitfield name="DC_GAIN_T2">
			<long_desc>Conversion gain for exposure T2. 0: Low Conversion Gain 1: High Conversion Gain</long_desc>
		</bitfield>
		<bitfield name="DC_GAIN_T3">
			<long_desc>Conversion gain for exposure T3. 0: Low Conversion Gain 1: High Conversion Gain</long_desc>
		</bitfield>
		<bitfield name="DC_GAIN_T4">
			<long_desc>Conversion gain for exposure T4. 0: Low Conversion Gain 1: High Conversion Gain</long_desc>
		</bitfield>
		<bitfield name="DC_GAIN_T1_CB">
			<long_desc>Context B Conversion gain for exposure T1 0: Low Conversion Gain 1: High Conversion Gain.</long_desc>
		</bitfield>
		<bitfield name="DC_GAIN_T2_CB">
			<long_desc>Context B Conversion gain for exposure T2. 0: Low Conversion Gain 1: High Conversion Gain</long_desc>
		</bitfield>
		<bitfield name="DC_GAIN_T3_CB">
			<long_desc>Context B Conversion gain for exposure T3. 0: Low Conversion Gain 1: High Conversion Gain</long_desc>
		</bitfield>
		<bitfield name="DC_GAIN_T4_CB">
			<long_desc>Context B Conversion gain for exposure T4. 0: Low Conversion Gain 1: High Conversion Gain</long_desc>
		</bitfield>
	</reg>
	<reg name="ANALOG_GAIN">
		<long_desc>analog gain for each exposure in context A.</long_desc>
		<bitfield name="ANALOG_GAIN_T1">
			<long_desc>Analog gain for exposure T1.  0000: 1/8x 0001: 2/8x 0010: 2/7x 0011: 3/7x 0100: 3/6x 0101: 4/6x 0110: 4/5x 0111: 5/5x 1000: 5/4x 1001: 6/4x 1010: 6/3x 1011: 7/3x 1100: 7/2x 1101: 8/2x 1110: 8/1x 1111: bypass.</long_desc>
		</bitfield>
		<bitfield name="ANALOG_GAIN_T2">
			<long_desc>Analog gain for exposure T2.  0000: 1/8x 0001: 2/8x 0010: 2/7x 0011: 3/7x 0100: 3/6x 0101: 4/6x 0110: 4/5x 0111: 5/5x 1000: 5/4x 1001: 6/4x 1010: 6/3x 1011: 7/3x 1100: 7/2x 1101: 8/2x 1110: 8/1x 1111: bypass.</long_desc>
		</bitfield>
		<bitfield name="ANALOG_GAIN_T3">
			<long_desc>Analog gain for exposure T3.  0000: 1/8x 0001: 2/8x 0010: 2/7x 0011: 3/7x 0100: 3/6x 0101: 4/6x 0110: 4/5x 0111: 5/5x 1000: 5/4x 1001: 6/4x 1010: 6/3x 1011: 7/3x 1100: 7/2x 1101: 8/2x 1110: 8/1x 1111: bypass.</long_desc>
		</bitfield>
		<bitfield name="ANALOG_GAIN_T4">
			<long_desc>Analog gain for exposure T4.  0000: 1/8x 0001: 2/8x 0010: 2/7x 0011: 3/7x 0100: 3/6x 0101: 4/6x 0110: 4/5x 0111: 5/5x 1000: 5/4x 1001: 6/4x 1010: 6/3x 1011: 7/3x 1100: 7/2x 1101: 8/2x 1110: 8/1x 1111: bypass.</long_desc>
		</bitfield>
	</reg>
	<reg name="ANALOG_GAIN_CB">
		<long_desc>analog gain for each exposure in context B.</long_desc>
		<bitfield name="ANALOG_GAIN_T1_CB">
			<long_desc>Context B Analog gain for exposure T1.  0000: 1/8x 0001: 2/8x 0010: 2/7x 0011: 3/7x 0100: 3/6x 0101: 4/6x 0110: 4/5x 0111: 5/5x 1000: 5/4x 1001: 6/4x 1010: 6/3x 1011: 7/3x 1100: 7/2x 1101: 8/2x 1110: 8/1x 1111: bypass.</long_desc>
		</bitfield>
		<bitfield name="ANALOG_GAIN_T2_CB">
			<long_desc>Context B Analog gain for exposure T2.  0000: 1/8x 0001: 2/8x 0010: 2/7x 0011: 3/7x 0100: 3/6x 0101: 4/6x 0110: 4/5x 0111: 5/5x 1000: 5/4x 1001: 6/4x 1010: 6/3x 1011: 7/3x 1100: 7/2x 1101: 8/2x 1110: 8/1x 1111: bypass.</long_desc>
		</bitfield>
		<bitfield name="ANALOG_GAIN_T3_CB">
			<long_desc>Context B Analog gain for exposure T3.  0000: 1/8x 0001: 2/8x 0010: 2/7x 0011: 3/7x 0100: 3/6x 0101: 4/6x 0110: 4/5x 0111: 5/5x 1000: 5/4x 1001: 6/4x 1010: 6/3x 1011: 7/3x 1100: 7/2x 1101: 8/2x 1110: 8/1x 1111: bypass.</long_desc>
		</bitfield>
		<bitfield name="ANALOG_GAIN_T4_CB">
			<long_desc>Context B Analog gain for exposure T4.  0000: 1/8x 0001: 2/8x 0010: 2/7x 0011: 3/7x 0100: 3/6x 0101: 4/6x 0110: 4/5x 0111: 5/5x 1000: 5/4x 1001: 6/4x 1010: 6/3x 1011: 7/3x 1100: 7/2x 1101: 8/2x 1110: 8/1x 1111: bypass.</long_desc>
		</bitfield>
	</reg>
	<reg name="DBLC_CONTROL">
		<long_desc>dblc control register</long_desc>
		<bitfield name="DBLC_ENABLE">
			<long_desc>main enable for dblc calculations and corrections.</long_desc>
		</bitfield>
		<bitfield name="DBLC_EMBED_EN">
			<long_desc>enable embedded data.  The dblc data registers are only available for read access to the I2C or to the embedded stats output, but not both.  Enabling reads onto embedded data will disable read access from the I2C.  Write access is not affected.</long_desc>
		</bitfield>
		<bitfield name="DBLC_FRAME_STYLE">
			<long_desc>frame style.  This register determines which 16 register sub-group of the 64 register TopCalc, 64 BtmCalc, or Correction groups.</long_desc>
		</bitfield>
		<bitfield name="DBLC_EN_GAINTRIG">
			<long_desc>enable gain triggering.  The DBLC measurements and calculations enabled or disabled from being triggered by changes in analog gain and exposures.</long_desc>
		</bitfield>
		<bitfield name="DBLC_EN_TEMPTRIG">
			<long_desc>enable temperature triggering.  The DBLC measurements and calculations can be enabled or disabled from being triggered by changes in temperature.</long_desc>
		</bitfield>
		<bitfield name="DBLC_EN_TOP_ROWS">
			<long_desc>enable top rows in calculation.  If clear the top DBLC calculation reigsters will not be transferred to the correction registers.  If set the top DBLC calculations will be transferred but may be averaged with the bottom rows during the transfer if the bottom rows are enabled.  It is assumed that at least one of the enable top rows or enable bottom rows bits are set.</long_desc>
		</bitfield>
		<bitfield name="DBLC_EN_BTM_ROWS">
			<long_desc>enable bottom rows in calculation.  If clear the bottom DBLC calculation registers will not be transferred to the correction registers.  If set the bottom DBLC calculation registers will be transferred but may be averaged with the top calculation registers if the top rows are enabled.</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS_TRIG_T1">
			<long_desc>manual trigger for t1, self clearing</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS_TRIG_T2">
			<long_desc>manual trigger for t2, self clearing</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS_TRIG_T3">
			<long_desc>manual trigger for t3, self clearing</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS_TRIG_T4">
			<long_desc>manual trigger for t4, self clearing</long_desc>
		</bitfield>
	</reg>
	<reg name="DBLC_FS0_CONTROL">
		<long_desc>dblc settings for frame style 0.  These settings are used if the dblc_frame_style field is set to zero.</long_desc>
		<bitfield name="DBLC_FS0_EN_T1">
			<long_desc>frame style enable for correcting t1</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS0_EN_T2">
			<long_desc>frame style enable for correcting t2</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS0_EN_T3">
			<long_desc>frame style enable for correcting t3</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS0_EN_T4">
			<long_desc>frame style enable for correcting t4</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS0_COLOR_MODE">
			<long_desc>frame style color mode</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS0_HIST_EN">
			<long_desc>frame style enable for history weighting</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS0_HIST_SEL">
			<long_desc>history register selection: 0 - dblc_weight0, 1 - dblc_weight1</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS0_SCALE_EN">
			<long_desc>frame style enable for scaling</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS0_SCALE_SEL">
			<long_desc>scaling register selection: 0 - dblc_scale0, 1 - dblc_scale1</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS0_OFFSET_EN">
			<long_desc>frame style enable for offset.</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS0_OFFSET_SEL">
			<long_desc>offset register selection: 0 - dblc_offset0, 1 - dblc_offset1</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS0_EN_CALC">
			<long_desc>frame style enable for measuring and calculating correction values.</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS0_EN_XFER">
			<long_desc>frame style enable to trasfer calculated correction value to active correction values</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS0_EN_CORR">
			<long_desc>frame style enable to perform correction.</long_desc>
		</bitfield>
		<bitfield name="DBLC_FS0_EVERY_FRAME">
			<long_desc>frame style performs calculation on every frame</long_desc>
		</bitfield>
	</reg>
	<reg name="DBLC_SCALE0">
		<long_desc>dblc scale 0, format is s16.12</long_desc>
	</reg>
	<reg name="DBLC_SCALE1">
		<long_desc>dblc scale 1, format is s16.12</long_desc>
	</reg>
	<reg name="DBLC_OFFSET0">
		<long_desc>dblc offset 0</long_desc>
	</reg>
	<reg name="DBLC_OFFSET1">
		<long_desc>dblc offset 1</long_desc>
	</reg>
	<reg name="DBLC_WEIGHT0">
		<long_desc>dblc weight 0.  weight0/256 is the weight give to history, (256-weight0)/256 is given to the current calculation.</long_desc>
	</reg>
	<reg name="DBLC_WEIGHT1">
		<long_desc>dblc weight 1.  weight1/256 is the weight give to history, (256-weight1)/256 is given to the current calculation.</long_desc>
	</reg>
	<reg name="DBLC_PEDESTAL">
		<long_desc>dblc pedestal value to add to OB pixels.  This addition can help keep these pixels from being clipped.</long_desc>
	</reg>
	<reg name="TPG_CONTROL">
		<long_desc>tpg control register</long_desc>
		<bitfield name="TPG_ENABLE">
			<long_desc>Main enable for all functions</long_desc>
		</bitfield>
		<bitfield name="TPG_MODE">
			<long_desc>00 - off, the standard pattern data and regions are zero. 01 - solid color.  Color0 registers are used in stdpat region 1 and Color1 registers are used in stdpat region 2. 10 - linearly increasing values (all codes).  Color0 registers define the initial values and Color1 registers define the increment values.  Values increment throughout the union of stdpat region 1 and stdpat region 2.  The 20 bit counters used to implement this pattern will overflow when they reach their maximum value. 11 - rectangular area (blob).  The color1 registers define the background color and the color0 registers define the blob color.  The corners of the rectangular area are defined by (blob_x1, blob_y1) to (blob_x2, blob_y2).  The counters used to define the rectangle update on any valid row type and any valid column type.</long_desc>
		</bitfield>
		<bitfield name="TPG_MERGE_MODE">
			<long_desc>00 - replace data from the ADC in enabled regions.&lt;RETURN&gt;01 - add pattern data to data from the ADC in enabled regions.&lt;RETURN&gt;1x - rectangular blob data overlays ADC data.&lt;RETURN&gt;</long_desc>
		</bitfield>
		<bitfield name="TPG_NOISE1_EN">
			<long_desc>Enable noise1, the HDR noise generator.  This signed generator is summed with the standard pattern before HDR decomposition.  The The amplitude is given by tpg_noise1_amplitude. The amplitude is given by tpg_noise1_amplitude.</long_desc>
		</bitfield>
		<bitfield name="TPG_NOISE2_EN">
			<long_desc>Enable noise2, noise generators for each exposure.  These values are summed in after HDR decomposition.  The amplitudes are given in tpg_nois2_amplitude.</long_desc>
		</bitfield>
		<bitfield name="TPG_NOISE1_AMPLITUDE">
			<long_desc>Amplitude for noise1 generator. The amplitude is 2^tgp_noise1_amplitude.</long_desc>
		</bitfield>
	</reg>
	<reg name="TPG_COLOR0_GR1_HI">
		<long_desc>high portion of 20-bit green1 value of color0.</long_desc>
	</reg>
	<reg name="TPG_COLOR0_GR1_LO">
		<long_desc>low portion of 20-bit green1 value of color0.</long_desc>
	</reg>
	<reg name="TPG_STDPAT_REGION1">
		<long_desc>Region enables for standard pattern region 1.   Region 1 is the intersection of the union of selected rows and the union of selected columns.     bit 12 – active columns.     bit 11 – RRC columns.     bit 10 – ODC left columns.     bit   9 – ODC right columns.     bit   8 – RNC columns.     bit   6 – ATR bottom rows.     bit   5 – ATR top rows.     bit   4 – active rows.     bit   3 – DBLC bottom rows.     bit   2 – DBLC top rows.     bit   1 – DTR bottom rows.     bit   0 – DTR top rows.</long_desc>
	</reg>
	<reg name="TPG_STDPAT_REGION2">
		<long_desc>Region enables for standard pattern region 2.  Region 1 is the intersection of the union of selected rows and the union of selected columns.      bit 12 – active columns.     bit 11 – RRC columns.     bit 10 – ODC left columns.     bit   9 – ODC right columns.     bit   8 – RNC columns.     bit   6 – ATR bottom rows.     bit   5 – ATR top rows.     bit   4 – active rows.     bit   3 – DBLC bottom rows.     bit   2 – DBLC top rows.     bit   1 – DTR bottom rows.     bit   0 – DTR top rows.</long_desc>
	</reg>
	<reg name="TPG_NOISE1_REGION">
		<long_desc>Region enables for noise generator 1.  See tpg_stdpat_region1 for bit definitions. bit 12 – active columns.     bit 11 – RRC columns.     bit 10 – ODC left columns.     bit   9 – ODC right columns.     bit   8 – RNC columns.     bit   6 – ATR bottom rows.     bit   5 – ATR top rows.     bit   4 – active rows.     bit   3 – DBLC bottom rows.     bit   2 – DBLC top rows.     bit   1 – DTR bottom rows.     bit   0 – DTR top rows.</long_desc>
	</reg>
	<reg name="TPG_NOISE2_REGION">
		<long_desc>Region enables for noise generator 2.  See tpg_stdpat_region1 for bit definitions. - bit 12 – active columns. - bit 11 – RRC columns. - bit 10 – ODC left columns. - bit   9 – ODC right columns. - bit   8 – RNC columns. - bit   6 – ATR bottom rows. - bit   5 – ATR top rows. - bit   4 – active rows. - bit   3 – DBLC bottom rows. - bit   2 – DBLC top rows. - bit   1 – DTR bottom rows. - bit   0 – DTR top rows. </long_desc>
	</reg>
	<reg name="TPG_NOISE2_AMPLITUDE">
		<bitfield name="TPG_NOISE2_T1_AMPLITUD">
			<long_desc>T1 noise amplitude for noise generator 2.  The amplitude is 2^tpg_noise2_t1_amplitude.</long_desc>
		</bitfield>
		<bitfield name="TPG_NOISE2_T2_AMPLITUD">
			<long_desc>T2 noise amplitude for noise generator 2.  The amplitude is 2^tpg_noise2_t2_amplitude.</long_desc>
		</bitfield>
		<bitfield name="TPG_NOISE2_T3_AMPLITUD">
			<long_desc>T3 noise amplitude for noise generator 2.  The amplitude is 2^tpg_noise2_t3_amplitude.</long_desc>
		</bitfield>
		<bitfield name="TPG_NOISE2_T4_AMPLITUD">
			<long_desc>T4 noise amplitude for noise generator 2.  The amplitude is 2^tpg_noise2_t4_amplitude.</long_desc>
		</bitfield>
	</reg>
	<reg name="TPG_BLOB_X1">
		<long_desc>X value for upper left corner of blob.</long_desc>
	</reg>
	<reg name="TPG_BLOB_Y1">
		<long_desc>Y value for upper left corner of blob.</long_desc>
	</reg>
	<reg name="TPG_BLOB_X2">
		<long_desc>X value for lower right corner of blob.</long_desc>
	</reg>
	<reg name="TPG_BLOB_Y2">
		<long_desc>Y value for lower right corner of blob.</long_desc>
	</reg>
	<reg name="TPG_HDR_RATIOS">
		<long_desc>HDR decomposition ratios and style.  The 20-bit standard pattern, after adding noise 1, is right shifted by these ratios to extract values to place on each exposure.  The value is then saturated if tpg_hdr_saturate is set and the next shorter exposure is not zero.</long_desc>
		<bitfield name="TPG_T1_T2_RATIO">
			<long_desc>Value to right shift exposure 1 by to get exposure 2.</long_desc>
		</bitfield>
		<bitfield name="TPG_T2_T3_RATIO">
			<long_desc>Value to right shift exposure 2 by to get exposure 3.</long_desc>
		</bitfield>
		<bitfield name="TPG_T3_T4_RATIO">
			<long_desc>Value to right shift exposure 3 by to get exposure 4.</long_desc>
		</bitfield>
		<bitfield name="TPG_HDR_DECOMPOSE">
			<long_desc>If set, standard patterns decompose the 20-bit pattern onto each exposure using the ratio fields.  If clear, only 13-bits of the pattern are put onto all exposures.</long_desc>
		</bitfield>
		<bitfield name="TPG_HDR_SATURATE">
			<long_desc>If set, saturate any exposure if the next shorter exposure is non zero.</long_desc>
		</bitfield>
	</reg>
	<reg name="OC_LUT_00">
		<long_desc>Oc_lut knee point 0</long_desc>
	</reg>
	<reg name="OC_LUT_01">
		<long_desc>Oc_lut knee point 1</long_desc>
	</reg>
	<reg name="OC_LUT_02">
		<long_desc>Oc_lut knee point 2</long_desc>
	</reg>
	<reg name="OC_LUT_03">
		<long_desc>Oc_lut knee point 3</long_desc>
	</reg>
	<reg name="OC_LUT_04">
		<long_desc>Oc_lut knee point 4</long_desc>
	</reg>
	<reg name="OC_LUT_05">
		<long_desc>Oc_lut knee point 5</long_desc>
	</reg>
	<reg name="OC_LUT_06">
		<long_desc>Oc_lut knee point 6</long_desc>
	</reg>
	<reg name="OC_LUT_07">
		<long_desc>Oc_lut knee point 7</long_desc>
	</reg>
	<reg name="OC_LUT_08">
		<long_desc>Oc_lut knee point 8</long_desc>
	</reg>
	<reg name="OC_LUT_09">
		<long_desc>Oc_lut knee point 9</long_desc>
	</reg>
	<reg name="OC_LUT_10">
		<long_desc>Oc_lut knee point 10</long_desc>
	</reg>
	<reg name="OC_LUT_11">
		<long_desc>Oc_lut knee point 11</long_desc>
	</reg>
	<reg name="OC_LUT_CONTROL">
		<long_desc>compand control register</long_desc>
		<bitfield name="OC_LEGACY_COMPANDING">
			<long_desc>enable legacy compand</long_desc>
		</bitfield>
		<bitfield name="OC_SET_LUT_DEFAULT">
			<long_desc>enable auto-loading look up table(lut)  default setting</long_desc>
		</bitfield>
	</reg>
	<reg name="TEST_ASIL_ROWS">
		<long_desc>test row quantity configuration</long_desc>
		<bitfield name="TEST_ASIL_ROWS_DIGITAL_TEST_TOP_ROWS_NR">
			<long_desc>Number of Top Digital Test Rows</long_desc>
		</bitfield>
		<bitfield name="TEST_ASIL_ROWS_ANALOG_TEST_BTM_ROWS_NR">
			<long_desc>Number of Bottom Analog Test Rows</long_desc>
		</bitfield>
	</reg>
	<reg name="SAMPLE_CTRL">
		<long_desc>Pixel array sample control</long_desc>
		<bitfield name="FD_READ">
			<long_desc>Enable FD read</long_desc>
		</bitfield>
		<bitfield name="FD_EXP">
			<long_desc>Exposure for FD read 00: T1 01: T2 10: T3 11: T4</long_desc>
		</bitfield>
		<bitfield name="EXP_T2_BYP">
			<long_desc>Set T2 exposure to T1 exposure</long_desc>
		</bitfield>
		<bitfield name="EXP_T3_BYP">
			<long_desc>Set T3 exposure to T2 exposure</long_desc>
		</bitfield>
		<bitfield name="EXP_T4_BYP">
			<long_desc>Set T4 exposure to T3 exposure</long_desc>
		</bitfield>
	</reg>
	<reg name="TAR_ADDR_3_0">
		<long_desc>Define analog test rows 0,1,2 and 3.</long_desc>
		<bitfield name="TAR_ADDR_0">
			<long_desc>Define Analog Test Row 0 4 LSB Row Address , {atr_row[10:4],tar_addr_0}</long_desc>
		</bitfield>
		<bitfield name="TAR_ADDR_1">
			<long_desc>Define Analog Test Row 1 4 LSB Row Address , {atr_row[10:4],tar_addr_1}</long_desc>
		</bitfield>
		<bitfield name="TAR_ADDR_2">
			<long_desc>Define Analog Test Row 2 4 LSB Row Address , {atr_row[10:4],tar_addr_2}</long_desc>
		</bitfield>
		<bitfield name="TAR_ADDR_3">
			<long_desc>Define Analog Test Row 3 4 LSB Row Address , {atr_row[10:4],tar_addr_3}</long_desc>
		</bitfield>
	</reg>
	<reg name="TAR_ADDR_7_4">
		<long_desc>Define analog test rows 4,5,6, and 7.</long_desc>
		<bitfield name="TAR_ADDR_4">
			<long_desc>Define Analog Test Row 4 4 LSB Row Address , {atr_row[10:4],tar_addr_4}</long_desc>
		</bitfield>
		<bitfield name="TAR_ADDR_5">
			<long_desc>Define Analog Test Row 5 4 LSB Row Address , {atr_row[10:4],tar_addr_5}</long_desc>
		</bitfield>
		<bitfield name="TAR_ADDR_6">
			<long_desc>Define Analog Test Row 6 4 LSB Row Address , {atr_row[10:4],tar_addr_6}</long_desc>
		</bitfield>
		<bitfield name="TAR_ADDR_7">
			<long_desc>Define Analog Test Row 7 4 LSB Row Address , {atr_row[10:4],tar_addr_7}</long_desc>
		</bitfield>
	</reg>
	<reg name="TAR_ADDR_11_8">
		<long_desc>Define analog test rows 8,9,10, and 11.</long_desc>
		<bitfield name="TAR_ADDR_8">
			<long_desc>Define Analog Test Row 8 4 LSB Row Address , {atr_row[10:4],tar_addr_8}</long_desc>
		</bitfield>
		<bitfield name="TAR_ADDR_9">
			<long_desc>Define Analog Test Row 9 4 LSB Row Address , {atr_row[10:4],tar_addr_9}</long_desc>
		</bitfield>
		<bitfield name="TAR_ADDR_10">
			<long_desc>Define Analog Test Row 10 4 LSB Row Address , {atr_row[10:4],tar_addr_10}</long_desc>
		</bitfield>
		<bitfield name="TAR_ADDR_11">
			<long_desc>Define Analog Test Row 11 4 LSB Row Address , {atr_row[10:4],tar_addr_11}</long_desc>
		</bitfield>
	</reg>
	<reg name="TAR_ADDR_15_12">
		<long_desc>Define analog test rows 12,13,14, and 15.</long_desc>
		<bitfield name="TAR_ADDR_12">
			<long_desc>Define Analog Test Row 12 4 LSB Row Address , {atr_row[10:4],tar_addr_12}</long_desc>
		</bitfield>
		<bitfield name="TAR_ADDR_13">
			<long_desc>Define Analog Test Row 13 4 LSB Row Address , {atr_row[10:4],tar_addr_13}</long_desc>
		</bitfield>
		<bitfield name="TAR_ADDR_14">
			<long_desc>Define Analog Test Row 14 4 LSB Row Address , {atr_row[10:4],tar_addr_14}</long_desc>
		</bitfield>
		<bitfield name="TAR_ADDR_15">
			<long_desc>Define Analog Test Row 15 4 LSB Row Address , {atr_row[10:4],tar_addr_15}</long_desc>
		</bitfield>
	</reg>
	<reg name="FLL_DITHER_CONTROL">
		<long_desc>FLL_DITHER_CONTROL</long_desc>
		<bitfield name="FLL_DITHER_BITS">
			<long_desc>Number of lsb bits in frame_length_lines that will be dithered when FLL_DITHER_EN is set</long_desc>
		</bitfield>
		<bitfield name="FLL_DITHER_EN">
			<long_desc>Enable frame_length_lines dithering</long_desc>
		</bitfield>
	</reg>
	<reg name="DUMMY_PIXEL_VALUE_REG">
		<long_desc>Sets dummy pixel value to use in data type or virtual channel interleaving.</long_desc>
	</reg>
	<reg name="GPIO_CONTROL1">
		<long_desc>pad controls which directly control pins of the pad cell.</long_desc>
		<bitfield name="GPIO0_OUTPUT_ENABLE">
			<long_desc>gpio0 oe 0 - disable output 1 - enable output</long_desc>
		</bitfield>
		<bitfield name="GPIO1_OUTPUT_ENABLE">
			<long_desc>gpio1 oe 0 - disable output 1 - enable output</long_desc>
		</bitfield>
		<bitfield name="GPIO2_OUTPUT_ENABLE">
			<long_desc>gpio2 oe 0 - disable output 1 - enable output</long_desc>
		</bitfield>
		<bitfield name="GPIO3_OUTPUT_ENABLE">
			<long_desc>gpio3 oe 0 - disable output 1 - enable output</long_desc>
		</bitfield>
		<bitfield name="GPIO0_INPUT_DISABLE">
			<long_desc>gpio0 ippd 0 - enable input buffer 1 - power down input buffer</long_desc>
		</bitfield>
		<bitfield name="GPIO1_INPUT_DISABLE">
			<long_desc>gpio1 ippd 0 - enable input buffer 1 - power down input buffer</long_desc>
		</bitfield>
		<bitfield name="GPIO2_INPUT_DISABLE">
			<long_desc>gpio2 ippd 0 - enable input buffer 1 - power down input buffer</long_desc>
		</bitfield>
		<bitfield name="GPIO3_INPUT_DISABLE">
			<long_desc>gpio3 ippd 0 - enable input buffer 1 - power down input buffer</long_desc>
		</bitfield>
	</reg>
	<reg name="GPIO_CONTROL2">
		<long_desc>gpio input mapping controls and shared padcell controls</long_desc>
		<bitfield name="GPIO0_ISEL">
			<long_desc>gpio0 input select 0 - no input function 1 - OUTPUT_ENABLE_N 2 - TRIGGER 3 - STANDBY</long_desc>
		</bitfield>
		<bitfield name="GPIO1_ISEL">
			<long_desc>gpio1 input select 0 - no input function 1 - OUTPUT_ENABLE_N 2 - TRIGGER 3 - STANDBY</long_desc>
		</bitfield>
		<bitfield name="GPIO2_ISEL">
			<long_desc>gpio2 input select 0 - no input function 1 - OUTPUT_ENABLE_N 2 - TRIGGER 3 - STANDBY</long_desc>
		</bitfield>
		<bitfield name="GPIO3_ISEL">
			<long_desc>gpio3 input select 0 - no input function 1 - OUTPUT_ENABLE_N 2 - TRIGGER 3 - STANDBY</long_desc>
		</bitfield>
		<bitfield name="GPIO_SLEW">
			<long_desc>GPIO slew control</long_desc>
		</bitfield>
		<bitfield name="GPIO_HIDRV_EN">
			<long_desc>Enable additional driver units for 1.8V VDDIO supply for GPIO.  1: Must be used when VDDIO is 1.8V.  0: Must be used when VDDIO is 2.8V. </long_desc>
		</bitfield>
	</reg>
	<reg name="GPIO_SELECT">
		<long_desc>GPIO output selection 0 - SYS_STATUS[0] 1 - SYS_STATUS[1] 2 - GPIO_STATUS[2] 4 - FLASH 5 - SHUTTER 6 - LINE_VALID 7 - FRAME_VALID 8 - drive zero 9 - drive one   The GPIO_STATUS are mapped as follows: 0 - hard reset, EXTCLK is toggling SYS_CHECK 0 - m3rom upload 1 - critical OTPM upload 2 - non-critical otpm upload 3 - register scan 4 - startup bist 5 - test frame 6 - standby 7 - stream.</long_desc>
		<bitfield name="GPIO0_OSEL">
			<long_desc>gpio0 output function selection</long_desc>
		</bitfield>
		<bitfield name="GPIO1_OSEL">
			<long_desc>gpio1 output function selection</long_desc>
		</bitfield>
		<bitfield name="GPIO2_OSEL">
			<long_desc>gpio2 output function selection</long_desc>
		</bitfield>
		<bitfield name="GPIO3_OSEL">
			<long_desc>gpio3 output function selection</long_desc>
		</bitfield>
	</reg>
	<reg name="I2CIDS0">
		<long_desc>i2c addresses for SADDR[2:0]=0 and 1</long_desc>
		<bitfield name="I2CIDS_000">
			<long_desc>i2c addresses for SADDR[2:0]=0.  Default is 0x20/0x21.  Bit 0 is ignored.</long_desc>
		</bitfield>
		<bitfield name="I2CIDS_001">
			<long_desc>i2c addresses for SADDR[2:0]=1.  Default is 0x30/0x31.  Bit 0 is ignored.</long_desc>
		</bitfield>
	</reg>
	<reg name="I2CIDS1">
		<long_desc>i2c addresses for SADDR[2:0]=2 and 3</long_desc>
		<bitfield name="I2CIDS_010">
			<long_desc>i2c addresses for SADDR[2:0]=2.  Default is 0x6c/0x6d.  Bit 0 is ignored.</long_desc>
		</bitfield>
		<bitfield name="I2CIDS_011">
			<long_desc>i2c addresses for SADDR[2:0]=3.  Default is 0x6e/0x6f.  Bit 0 is ignored.</long_desc>
		</bitfield>
	</reg>
	<reg name="I2CIDS2">
		<long_desc>i2c addresses for SADDR[2:0]=4 and 5</long_desc>
		<bitfield name="I2CIDS_100">
			<long_desc>i2c addresses for SADDR[2:0]=4.  Default is 0x40/0x41.  Bit 0 is ignored.</long_desc>
		</bitfield>
		<bitfield name="I2CIDS_101">
			<long_desc>i2c addresses for SADDR[2:0]=5.  Default is 0x50/0x51.  Bit 0 is ignored.</long_desc>
		</bitfield>
	</reg>
	<reg name="I2CIDS3">
		<long_desc>i2c addresses for SADDR[2:0]=6 and 7</long_desc>
		<bitfield name="I2CIDS_110">
			<long_desc>i2c addresses for SADDR[2:0]=6.  Hard coded to 0x60/0x61.  Bit 0 is ignored.</long_desc>
		</bitfield>
		<bitfield name="I2CIDS_111">
			<long_desc>i2c addresses for SADDR[2:0]=7.  Hard coded to 0x70/0x71.  Bit 0 is ignored.</long_desc>
		</bitfield>
	</reg>
	<reg name="ASIL_EXT_CLK_COUNT_MSB_EXPECT">
		<long_desc>Target ext_clk count per frame(msb)</long_desc>
	</reg>
	<reg name="ASIL_EXT_CLK_COUNT_LSB_EXPECT">
		<long_desc>Target ext_clk count per frame(lsb)</long_desc>
	</reg>
	<reg name="ASIL_CLK_PIX_COUNT_MSB_EXPECT">
		<long_desc>Target Clk_pix count per frame(msb)</long_desc>
	</reg>
	<reg name="ASIL_CLK_PIX_COUNT_LSB_EXPECT">
		<long_desc>Target Clk_pix count per frame(lsb)</long_desc>
	</reg>
	<reg name="ASIL_CLK_OP_COUNT_MSB_EXPECT">
		<long_desc>Target Clk_op count per frame(msb)</long_desc>
	</reg>
	<reg name="ASIL_CLK_OP_COUNT_LSB_EXPECT">
		<long_desc>Target Clk_op count per frame(lsb)</long_desc>
	</reg>
	<reg name="ASIL_CLK_REG_COUNT_MSB_EXPECT">
		<long_desc>Target Clk_reg counte per frame(msb)</long_desc>
	</reg>
	<reg name="ASIL_CLK_REG_COUNT_LSB_EXPECT">
		<long_desc>Target Clk_reg counte per frame(lsb)</long_desc>
	</reg>
	<reg name="ASIL_CLK_PIX_COUNT_100_EXT_EXPECT">
		<long_desc>Target Clk_pix count for 100 ext_clk cycles</long_desc>
	</reg>
	<reg name="ASIL_CLK_OP_COUNT_100_EXT_EXPECT">
		<long_desc>Target Clk_op count for 100 ext_clk cycles</long_desc>
	</reg>
	<reg name="ASIL_CLK_REG_COUNT_100_EXT_EXPECT">
		<long_desc>Target Clk_reg count for 100 ext_clk cycles</long_desc>
	</reg>
	<reg name="ASIL_CLK_COUNT_THRESHOLD">
		<long_desc>Clock count threshold per frame</long_desc>
		<bitfield name="ASIL_EXT_CLK_COUNT_THRESHOLD">
			<long_desc>Clock count threshold per frame for ext_clk</long_desc>
		</bitfield>
		<bitfield name="ASIL_CLK_PIX_COUNT_THRESHOLD">
			<long_desc>Clock count threshold per frame for clk_pix</long_desc>
		</bitfield>
		<bitfield name="ASIL_CLK_OP_COUNT_THRESHOLD">
			<long_desc>Clock count threshold per frame for clk_op</long_desc>
		</bitfield>
		<bitfield name="ASIL_CLK_REG_COUNT_THRESHOLD">
			<long_desc>Clock count threshold per frame for clk_reg</long_desc>
		</bitfield>
	</reg>
	<reg name="ASIL_CLK_COUNT_100_THRESHOLD">
		<long_desc>Clock count threshold per 100 ext_clk duration</long_desc>
		<bitfield name="ASIL_CLK_PIX_COUNT_100_THRESHOLD">
			<long_desc>Clock count threshold per 100 ext_clk duration for clk_pix</long_desc>
		</bitfield>
		<bitfield name="ASIL_CLK_OP_COUNT_100_THRESHOLD">
			<long_desc>Clock count threshold per 100 ext_clk duration for clk_op</long_desc>
		</bitfield>
		<bitfield name="ASIL_CLK_REG_COUNT_100_THRESHOLD">
			<long_desc>Clock count threshold per 100 ext_clk duration for clk_reg</long_desc>
		</bitfield>
	</reg>
	<reg name="DAC_LD_16_17">
		<long_desc>sreg 16,17</long_desc>
		<bitfield name="NUMBER_AB_PULSES_MSB">
			<long_desc>Sets the number of AB pulses used in LFM mode.</long_desc>
		</bitfield>
	</reg>
	<reg name="DAC_LD_18_19">
		<long_desc>sreg 18,19</long_desc>
		<bitfield name="AB_PERIOD">
			<long_desc>Sets the AB pulse width expressed in row times. LFM integration time is ~(AB_period - AB_pulse_width)*rowtime</long_desc>
		</bitfield>
		<bitfield name="NUMBER_AB_PULSES_LSB">
			<long_desc>Sets the number of AB pulses used in LFM mode.</long_desc>
		</bitfield>
	</reg>
	<reg name="DAC_LD_20_21">
		<long_desc>sreg 20,21</long_desc>
		<bitfield name="AB_SKIP">
			<long_desc>Controls skip pattern. 2 legal combinations 10 &amp; 11. The default is 10 which is color mode. If 11, then pixel summing mono mode. These bits are set when x3082 bit 7 (lfm merge mode) is set.</long_desc>
		</bitfield>
		<bitfield name="AB_EN">
			<long_desc>If high coincident with row addr =5F1 and select&lt;1&gt;, then the LFM system is enabled. This bit is set when x3082 bit 6 (lfm mode) is set.</long_desc>
		</bitfield>
		<bitfield name="NAB_RESET">
			<long_desc>If low then resets all flops and latches in the LFM system. This bit is set when x3082 bit 6 (lfm mode) is set. It is delayed for an additional frame to allow the proper synchronization of switching lfm and non-lfm modes.</long_desc>
		</bitfield>
		<bitfield name="AB_PULSE_WIDTH">
			<long_desc>Sets the AB pulse width expressed in row times. LFM integration time is ~(AB_period - AB_pulse_width)*rowtime</long_desc>
		</bitfield>
	</reg>
	<reg name="DAC_LD_22_23">
		<long_desc>sreg 22,23</long_desc>
		<bitfield name="STOP_POINTER">
			<long_desc>Used for windowing in LFM mode, uses the MSB&apos;s of windowing registers to set the stopping point of shifting</long_desc>
		</bitfield>
		<bitfield name="START_POINTER">
			<long_desc>Used for windowing in LFM mode, uses the MSB&apos;s of windowing registers to set the starting point of shifting</long_desc>
		</bitfield>
	</reg>
	<reg name="STATC_ERR_EN">
		<bitfield name="STATC_ERR_BAD_WRADDR_PIN_EN">
			<long_desc>Enable corresponding error flag in x2e80 to SYS_CHECK pin.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_WRDATA_PIN_EN">
			<long_desc>Enable corresponding error flag in x2e80 to SYS_CHECK pin.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_RDDATA_PIN_EN">
			<long_desc>Enable corresponding error flag in x2e80 to SYS_CHECK pin.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST2_PIN_EN">
			<long_desc>Enable corresponding error flag in x2e80 to SYS_CHECK pin.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST3_PIN_EN">
			<long_desc>Enable corresponding error flag in x2e80 to SYS_CHECK pin.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST4_PIN_EN">
			<long_desc>Enable corresponding error flag in x2e80 to SYS_CHECK pin.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST12_PIN_EN">
			<long_desc>Enable corresponding error flag in x2e80 to SYS_CHECK pin.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST13_PIN_EN">
			<long_desc>Enable corresponding error flag in x2e80 to SYS_CHECK pin.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST14_PIN_EN">
			<long_desc>Enable corresponding error flag in x2e80 to SYS_CHECK pin.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST15_PIN_EN">
			<long_desc>Enable corresponding error flag in x2e80 to SYS_CHECK pin.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST26_PIN_EN">
			<long_desc>Enable corresponding error flag in x2e80 to SYS_CHECK pin.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST100_PIN_EN">
			<long_desc>Enable corresponding error flag in x2e80 to SYS_CHECK pin.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST101_PIN_EN">
			<long_desc>Enable corresponding error flag in x2e80 to SYS_CHECK pin.</long_desc>
		</bitfield>
		<bitfield name="STATC_ERR_BAD_DTEST103_PIN_EN">
			<long_desc>Enable corresponding error flag in x2e80 to SYS_CHECK pin.</long_desc>
		</bitfield>
	</reg>
	<reg name="MBIST_STARTUP_CONTROL">
		<long_desc>Each bit controls which MBIST memory group to run startup BIST</long_desc>
	</reg>
	<reg name="MBIST_STARTUP_RESULT">
		<long_desc>Each bit corresponds to the Pass/Fail result of the MBIST memory group from startup BIST.  1 indicates pass, 0 fail</long_desc>
	</reg>
	<reg name="MBIST_STARTUP_STATUS">
		<long_desc>Each bit corresponds to the completion of startup BIST on a memory group.  1 indicates BIST complete</long_desc>
	</reg>
	<reg name="OTPM_DATA_0">
		<long_desc>OTPM data to be written to the OTPM through auto write should be stored here and on the other OTPM_DATA_* registers. After OTPM auto read the data will be available here. The exception is for record using automatic upload to registers. In this case the OTPM data will not be available in the OTPM RAM unless the automatic upload feature is turned off.  There are a total of 256 of these registers spanning 0x3800 to 0x39FE.</long_desc>
	</reg>
	<reg name="DELAY_BUFFER_CRC_FAULT_CONTROL">
		<long_desc>Delay buffers data and write/read pointer CRC fault check control</long_desc>
		<bitfield name="DELAY_BUFFER_CRC_FAULT_RESET">
			<long_desc>Reset delay buffers CRC fault counters and flag</long_desc>
		</bitfield>
		<bitfield name="DELAY_BUFFER_CRC_FAULT_EN">
			<long_desc>Enable delay buffers CRC fault check</long_desc>
		</bitfield>
		<bitfield name="DELAY_BUFFER_SYS_CHECK_EN">
			<long_desc>Enable delay buffers CRC fault check to be reported on the sys check pin</long_desc>
		</bitfield>
	</reg>
	<reg name="DELAY_BUFFER_LLPCK_RD_WR_OVERLAP">
		<long_desc>Delay buffer llpck read/write overlap</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_00">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_01">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_02">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_03">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_04">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_05">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_06">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_07">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_08">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_09">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_10">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_11">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_12">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_13">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_14">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_15">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_16">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_17">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_18">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_19">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_SLOPE_20">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_OFFSET_A">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_OFFSET_B">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_OFFSET_C">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_OFFSET_D">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_OFFSET_E">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_OFFSET_F">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_OFFSET_G">
		<long_desc>Storage location for booster montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS_BOOST_CAL_OFFSET_H">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS0_VMON_CAL_SLOPE_0">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS0_VMON_CAL_SLOPE_1">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS0_VMON_CAL_SLOPE_2">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS0_VMON_CAL_SLOPE_3">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS0_VMON_CAL_SLOPE_4">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS0_VMON_CAL_SLOPE_5">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS0_VMON_CAL_SLOPE_6">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS1_VMON_CAL_SLOPE_0">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS1_VMON_CAL_SLOPE_1">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS1_VMON_CAL_SLOPE_2">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS1_VMON_CAL_SLOPE_3">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS1_VMON_CAL_SLOPE_4">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS1_VMON_CAL_SLOPE_5">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="TEMPVSENS1_VMON_CAL_SLOPE_6">
		<long_desc>Storage location for voltage montior calibration data</long_desc>
	</reg>
	<reg name="ASIL_CHECK_ENABLES_00">
		<long_desc>Asil_check_enables_00</long_desc>
		<bitfield name="ASIL_CHK_EXT_CLK_PARAM">
			<long_desc>Enable asil check on ext_clk per frame</long_desc>
		</bitfield>
		<bitfield name="ASIL_CHK_CLK_PIX_PARAM">
			<long_desc>Enable asil check on clk_pix per frame</long_desc>
		</bitfield>
		<bitfield name="ASIL_CHK_CLK_OP_PARAM">
			<long_desc>Enable asil check on clk_op per frame</long_desc>
		</bitfield>
		<bitfield name="ASIL_CHK_CLK_REG_PARAM">
			<long_desc>Enable asil check on clk_reg per frame</long_desc>
		</bitfield>
		<bitfield name="ASIL_CHK_CLK_PIX_100_PARAM">
			<long_desc>Enable asil check on clk_pix for 100 ext_clk</long_desc>
		</bitfield>
		<bitfield name="ASIL_CHK_CLK_OP_100_PARAM">
			<long_desc>Enable asil check on clk_op for 100 ext_clk</long_desc>
		</bitfield>
		<bitfield name="ASIL_CHK_CLK_REG_100_PARAM">
			<long_desc>Enable asil check on clk_reg for 100 ext_clk</long_desc>
		</bitfield>
	</reg>
	<reg name="ASIL_CHECK_ENABLES_01">
		<long_desc>asil_check_enables_01</long_desc>
		<bitfield name="CHECK_CRT">
			<long_desc>Enable column rom test.</long_desc>
		</bitfield>
		<bitfield name="CHECK_MT1">
			<long_desc>Enable adc memory test 1 check.</long_desc>
		</bitfield>
		<bitfield name="CHECK_MT2">
			<long_desc>Enable adc memory test 2 check.</long_desc>
		</bitfield>
		<bitfield name="CHECK_OT1_LOW">
			<long_desc>Enable low pixel value check on overdrive 1 rows.</long_desc>
		</bitfield>
		<bitfield name="CHECK_OT1_HIGH">
			<long_desc>Enable high pixel value check on overdrive 1 rows.</long_desc>
		</bitfield>
		<bitfield name="CHECK_OT2_LOW">
			<long_desc>Enable low pixel value check on overdrive 2 rows.</long_desc>
		</bitfield>
		<bitfield name="CHECK_OT2_HIGH">
			<long_desc>Enable high pixel value check on overdrive 2 rows.</long_desc>
		</bitfield>
		<bitfield name="CHECK_ZT_AB_LEGAL">
			<long_desc>Enable check for legal pixel values (not between thresholds) on zebra AB rows.</long_desc>
		</bitfield>
		<bitfield name="CHECK_ZT_AB_VALUE">
			<long_desc>Enable check for correct values (high enough or low enough) on zebra AB rows.</long_desc>
		</bitfield>
		<bitfield name="CHECK_ZT_BA_LEGAL">
			<long_desc>Enable check for legal pixel values (not between thresholds) on zebra BA rows.</long_desc>
		</bitfield>
		<bitfield name="CHECK_ZT_BA_VALUE">
			<long_desc>Enable check for correct values (high enough or low enough) on zebra BA rows.</long_desc>
		</bitfield>
		<bitfield name="CHECK_PT1">
			<long_desc>Enable check for pixout test 1 (pixels must be below a threshold).</long_desc>
		</bitfield>
		<bitfield name="CHECK_PT2">
			<long_desc>Enable check for pixout test 2 (pixels must be above a threshold).</long_desc>
		</bitfield>
		<bitfield name="CHECK_RRC_LEGAL">
			<long_desc>Enable check for legal pixel values (not between thresholds) on RRC columns.</long_desc>
		</bitfield>
		<bitfield name="CHECK_RRC_ADDR">
			<long_desc>Enable check for RRC address columns.</long_desc>
		</bitfield>
	</reg>
	<reg name="ASIL_CHECK_ENABLES_02">
		<long_desc>Enables for various asil checks.</long_desc>
		<bitfield name="EMBEDDED_CRC_ENABLE">
			<long_desc>enables embedded CRC</long_desc>
		</bitfield>
		<bitfield name="DBLC_RAM_ECC_DED_ENABLE">
			<long_desc>enables DBLC ram DED ecc check</long_desc>
		</bitfield>
		<bitfield name="DBLC_RAM_ECC_SEC_ENABLE">
			<long_desc>enables DBLC ram SEC ecc check</long_desc>
		</bitfield>
		<bitfield name="SEQUENCER_ECC_STATUS_ENABLE">
			<long_desc>enables sequencer ram ecc check.</long_desc>
		</bitfield>
		<bitfield name="DTR_CRC_ENABLE">
			<long_desc>enables DTR region CRC calculation.</long_desc>
		</bitfield>
		<bitfield name="ROW_FRAME_CRC_ENABLE">
			<long_desc>enables image ROW or FRAME CRC</long_desc>
		</bitfield>
	</reg>
	<reg name="ASIL_STARTUP_ENABLES_00">
		<long_desc>ASIL startup check enable bits</long_desc>
		<bitfield name="EN_M3ROM_SCAN">
			<long_desc>Enable M3 ROM scan</long_desc>
		</bitfield>
		<bitfield name="EN_OTPM_SCAN">
			<long_desc>Enable OTPM cache scan</long_desc>
		</bitfield>
		<bitfield name="EN_IREG_SCAN">
			<long_desc>Enable register scan</long_desc>
		</bitfield>
		<bitfield name="EN_PDI_SCAN">
			<long_desc>Enable PDI cache scan</long_desc>
		</bitfield>
		<bitfield name="EN_STARTUP_BIST">
			<long_desc>Enable startup BIST</long_desc>
		</bitfield>
		<bitfield name="STARTUP_BIST_RESTART">
			<long_desc>Restart startup BIST after initial run</long_desc>
		</bitfield>
		<bitfield name="EN_TEST_FRAME">
			<long_desc>Enable test frame for startup checks</long_desc>
		</bitfield>
		<bitfield name="MASK_TEST_FRAME">
			<long_desc>Mask output of test frame</long_desc>
		</bitfield>
		<bitfield name="STARTUP_BIST_SYS_CHECK_EN">
			<long_desc>Enable startup BIST fails to report on sys check pin</long_desc>
		</bitfield>
	</reg>
	<reg name="ASIL_PIN_ENABLES_00">
		<long_desc>Asil_pin_enables_00</long_desc>
		<bitfield name="ASIL_PIN_EXT_CLK_PARAM">
			<long_desc>Enable asil sys_check pin on ext_clk per frame</long_desc>
		</bitfield>
		<bitfield name="ASIL_PIN_CLK_PIX_PARAM">
			<long_desc>Enable asil sys_check pin on clk_pix per frame</long_desc>
		</bitfield>
		<bitfield name="ASIL_PIN_CLK_OP_PARAM">
			<long_desc>Enable asil sys_check pin on clk_op per frame</long_desc>
		</bitfield>
		<bitfield name="ASIL_PIN_CLK_REG_PARAM">
			<long_desc>Enable asil sys_check pin on clk_reg per frame</long_desc>
		</bitfield>
		<bitfield name="ASIL_PIN_CLK_PIX_100_PARAM">
			<long_desc>Enable asil sys_check pin on clk_pix for 100 ext_clk</long_desc>
		</bitfield>
		<bitfield name="ASIL_PIN_CLK_OP_100_PARAM">
			<long_desc>Enable asil sys_check pin on clk_op for 100 ext_clk</long_desc>
		</bitfield>
		<bitfield name="ASIL_PIN_CLK_REG_100_PARAM">
			<long_desc>Enable asil sys_check pin on clk_reg for 100 ext_clk</long_desc>
		</bitfield>
	</reg>
	<reg name="ASIL_PIN_ENABLES_01">
		<long_desc>asil_pin_enables_01</long_desc>
		<bitfield name="EN_PIN_CRT">
			<long_desc>enable CRT check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="EN_PIN_MT1">
			<long_desc>enable MT1 check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="EN_PIN_MT2">
			<long_desc>enable MT2 check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="EN_PIN_OT1_LOW">
			<long_desc>enable OT1 low check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="EN_PIN_OT1_HIGH">
			<long_desc>enable OT1 high check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="EN_PIN_OT2_LOW">
			<long_desc>enable OT2 low check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="EN_PIN_OT2_HIGH">
			<long_desc>enable OT2 high check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="EN_PIN_ZT_AB_LEGAL">
			<long_desc>enable zebra AB test legal check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="EN_PIN_ZT_AB_VALUE">
			<long_desc>enable zebra AB test correct value check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="EN_PIN_ZT_BA_LEGAL">
			<long_desc>enable zebra BA test legal check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="EN_PIN_ZT_BA_VALUE">
			<long_desc>enable zebra BA test correct value check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="EN_PIN_PT1">
			<long_desc>enable pixout test 1 check result onto sys_check_pin.</long_desc>
		</bitfield>
		<bitfield name="EN_PIN_PT2">
			<long_desc>enable pixout test 2 check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="EN_PIN_RRC_LEGAL">
			<long_desc>enable row rom legal pixel value check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="EN_PIN_RRC_ADDR">
			<long_desc>enable row rom address value check result onto sys_check pin.</long_desc>
		</bitfield>
	</reg>
	<reg name="ASIL_PIN_ENABLES_02">
		<long_desc>Each bit enables a failure of the corresponding check to raise the SYS_CHECK pin.</long_desc>
		<bitfield name="EMBEDDED_CRC_PIN_ENABLE">
			<long_desc>Enables assertions of the ASIL SYS_CHECK status for embedded CRC</long_desc>
		</bitfield>
		<bitfield name="DBLC_RAM_ECC_DED_PIN_ENABLE">
			<long_desc>Enables dblc ram ecc DED check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="DBLC_RAM_ECC_SEC_PIN_ENABLE">
			<long_desc>Enables dblc ram ecc SEC check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="DBLC_STATE_PARITY_PIN_ENABLE">
			<long_desc>Enables dblc state machine parity check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="SEQUENCER_ECC_STATUS_PIN_ENABLE">
			<long_desc>Enables sequencer ram ecc check result onto sys_check pin.</long_desc>
		</bitfield>
		<bitfield name="DTR_CRC_PIN_ENABLE">
			<long_desc>Enables assertions of ASIL SYS_CHECK pin for image DTR regions</long_desc>
		</bitfield>
		<bitfield name="ROW_FRAME_CRC_PIN_ENABLE">
			<long_desc>Enables assertions of ASIL SYS_CHECK pin for image FRAME or ROW CRC</long_desc>
		</bitfield>
	</reg>
	<reg name="ASIL_STARTUP_PIN_ENABLES_00">
		<long_desc>asil_startup_pin_enables_00</long_desc>
		<bitfield name="PIN_ENABLE_M3_ROM_SCAN">
			<long_desc>Enable M3 ROM scan result to be reported on the sys check pin</long_desc>
		</bitfield>
		<bitfield name="PIN_ENABLE_OTPM_CACHE_SCAN">
			<long_desc>Enable OTPM cache scan result to be reported on the sys check pin</long_desc>
		</bitfield>
		<bitfield name="PIN_ENABLE_REGISTER_SCAN">
			<long_desc>Enable register scan result to be reported on the sys check pin</long_desc>
		</bitfield>
		<bitfield name="PIN_ENABLE_PDI_CACHE_SCAN">
			<long_desc>Enable PDI cache scan result to be reported on the sys check pin</long_desc>
		</bitfield>
	</reg>
	<reg name="PROCESS_DTR">
		<long_desc>Block enables that allow the block to process the DTR rows.</long_desc>
		<bitfield name="DTR_RNC">
			<long_desc>enable rnc on dtr rows</long_desc>
		</bitfield>
		<bitfield name="DTR_RNC_DITHER">
			<long_desc>enable rnc dither on dtr rows</long_desc>
		</bitfield>
		<bitfield name="DTR_DBLC">
			<long_desc>enable dblc on dtr rows</long_desc>
		</bitfield>
		<bitfield name="DTR_DEF_CORR">
			<long_desc>enable defect correction on dtr rows</long_desc>
		</bitfield>
		<bitfield name="DTR_PRE_HDR_GAIN">
			<long_desc>enable pre hdr gain on dtr rows</long_desc>
		</bitfield>
		<bitfield name="DTR_PRE_HDR_GAIN_DITHER">
			<long_desc>enable pre hdr gain dither on dtr rows</long_desc>
		</bitfield>
		<bitfield name="DTR_POST_HDR_GAIN">
			<long_desc>enabe post hdr gain on dtr rows</long_desc>
		</bitfield>
		<bitfield name="DTR_POST_HDR_GAIN_DITHER">
			<long_desc>enable post hdr gain dither on dtr rows</long_desc>
		</bitfield>
		<bitfield name="DTR_PEDESTAL">
			<long_desc>enable pedestal on dtr rows</long_desc>
		</bitfield>
		<bitfield name="DTR_NOISE_PEDESTAL">
			<long_desc>enable noise pedestal on dtr rows</long_desc>
		</bitfield>
		<bitfield name="DTR_BARRIER_DITHER">
			<long_desc>enable barrier dither on DTR rows</long_desc>
		</bitfield>
	</reg>
	<reg name="TEMPVSENS0_TMG_CTRL">
		<long_desc>top temperature sensor voltage monitoring and timing control</long_desc>
		<bitfield name="VMON0_START_CONVERSION_STREAM">
			<long_desc>set to request supply voltage conversions in top temperature sensor when in stream mode when enabled</long_desc>
		</bitfield>
		<bitfield name="VMON0_START_CONVERSION_STANDBY">
			<long_desc>set to request supply voltage conversions in top temperature sensor when in standby mode when enabled</long_desc>
		</bitfield>
		<bitfield name="VMON0_ADDR_CONT">
			<long_desc>set to enable the manual vmon0_test_ctrl_i register and write successively into vmon0 data registers</long_desc>
		</bitfield>
		<bitfield name="VMON0_CLEAR_VALUES">
			<long_desc>set to clear all the vmon0 data registers</long_desc>
		</bitfield>
		<bitfield name="TEMP0_TEST_CTRL">
			<long_desc>manual top temperature test_ctrl selector   Vbg=0x1 Vctat=0x2</long_desc>
		</bitfield>
		<bitfield name="TEMPSENS0_DIV_BY_N">
			<long_desc>Divides top temperature sensor clock vt_pixel_clock by n-value N=0 is div-by-32</long_desc>
		</bitfield>
		<bitfield name="VMON0_TRIG_CONT">
			<long_desc>set to trigger vmon0 conversions continuously unless continuous temperature triggering is enabled</long_desc>
		</bitfield>
		<bitfield name="TEMP0_TRIG_CONT">
			<long_desc>set to trigger top temperature conversions continuously</long_desc>
		</bitfield>
		<bitfield name="TEMP0_ADDR_LOCK">
			<long_desc>set to ensure top temperature conversions are doing temperature only</long_desc>
		</bitfield>
	</reg>
	<reg name="TEMPVSENS1_TMG_CTRL">
		<long_desc>bottom temperature sensor voltage monitoring and timing control</long_desc>
		<bitfield name="VMON1_START_CONVERSION_STREAM">
			<long_desc>set to request supply voltage conversions in bottom temperature sensor when in stream mode when enabled</long_desc>
		</bitfield>
		<bitfield name="VMON1_START_CONVERSION_STANDBY">
			<long_desc>set to request supply voltage conversions in bottom temperature sensor when in standby mode when enabled</long_desc>
		</bitfield>
		<bitfield name="VMON1_ADDR_CONT">
			<long_desc>set to enable the manual vmon1_test_ctrl_i register and write successively into vmon1 data registers</long_desc>
		</bitfield>
		<bitfield name="VMON1_CLEAR_VALUES">
			<long_desc>set to clear all the vmon1 data registers</long_desc>
		</bitfield>
		<bitfield name="TEMP1_TEST_CTRL">
			<long_desc>manual btm temperature test_ctrl selector   Vbg=0x1 Vctat=0x2  requires temp1_addr_lock is clear</long_desc>
		</bitfield>
		<bitfield name="TEMPSENS1_DIV_BY_N">
			<long_desc>Divides bottom temperature sensor clock vt_pixel_clock by n-value</long_desc>
		</bitfield>
		<bitfield name="VMON1_TRIG_CONT">
			<long_desc>set to trigger vmon1 conversions continuously unless continuous temperature triggering is enabled</long_desc>
		</bitfield>
		<bitfield name="TEMP1_TRIG_CONT">
			<long_desc>set to trigger bottom  temperature conversions continuously</long_desc>
		</bitfield>
		<bitfield name="TEMP1_ADDR_LOCK">
			<long_desc>set to ensure bottom temperature conversions are doing temperature only</long_desc>
		</bitfield>
	</reg>
	<reg name="TEMPVSENS0_FLAG_CTRL">
		<long_desc>top temperature sensor flag control</long_desc>
		<bitfield name="TEMPSENS0_YELLOW_HYST">
			<long_desc>hysteresis in raw temperature codes around the yellow flag code trip point</long_desc>
		</bitfield>
		<bitfield name="TEMPSENS0_YELLOW_OFF_RED">
			<long_desc>yellow flag trip point as number of raw codes values below the red flag code trip point</long_desc>
		</bitfield>
		<bitfield name="TEMPSENS0_RED_TEMP_CODE">
			<long_desc>raw temp code where top temp sensor reports only temperature til part is reset</long_desc>
		</bitfield>
	</reg>
	<reg name="TEMPVSENS1_FLAG_CTRL">
		<long_desc>bottom temperature sensor flag control</long_desc>
		<bitfield name="TEMPSENS1_YELLOW_HYST">
			<long_desc>hysteresis in raw temperature codes around the yellow flag code trip point</long_desc>
		</bitfield>
		<bitfield name="TEMPSENS1_YELLOW_OFF_RED">
			<long_desc>yellow flag trip point as number of raw codes values below the red flag code trip point</long_desc>
		</bitfield>
		<bitfield name="TEMPSENS1_RED_TEMP_CODE">
			<long_desc>raw temp code where bottom temp sensor and FLAG_PIN report only temperature til part is reset</long_desc>
		</bitfield>
	</reg>
	<reg name="TEMPVSENS_ADDR_CTRL">
		<long_desc>voltage monitor manual test_ctrl selector</long_desc>
		<bitfield name="VMON0_TEST_CTRL_I">
			<long_desc>top TEMP=0 dec  top VAA=5 dec top DVDD=7 dec top VDDIO=8 dec</long_desc>
		</bitfield>
		<bitfield name="VMON1_TEST_CTRL_I">
			<long_desc>btm TEMP=0 dec  top VAA=5 dec top DVDD=7 dec top VDDIO=8 dec</long_desc>
		</bitfield>
	</reg>
	<reg name="TEMPVSENS0_BOOST_SAMP_CTRL">
		<long_desc>top temperature sensor analog bandbap and analog booster voltage sampling control</long_desc>
		<bitfield name="SAMP_START_CONV_STRM">
			<long_desc>set to enable analog bandgap and analog booster voltage sampling</long_desc>
		</bitfield>
		<bitfield name="SAMP_CLEAR_VALUES">
			<long_desc>set to clear samp bgap and booster data registers</long_desc>
		</bitfield>
		<bitfield name="SAMP_MUX_ADDR_I">
			<long_desc>set to select a desired bandgap/booster  applicable only in samp_addr_cont mode</long_desc>
		</bitfield>
		<bitfield name="SAMP_AGND">
			<long_desc>set to measure AGND node instead of bandgap or booster voltage</long_desc>
		</bitfield>
		<bitfield name="SAMP_NO_PRECONDITION">
			<long_desc>set to defeat pre-condition voltage on analog bandgap and analog booster voltage sampling capacitors</long_desc>
		</bitfield>
		<bitfield name="SAMP_TRIG_CONT">
			<long_desc>set to trigger booster sampling continuously unless temperature or voltage is set to trigger continuously</long_desc>
		</bitfield>
		<bitfield name="SAMP_ADDR_CONT">
			<long_desc>set to continuously measure the  bandgap/booster selected and poke successively  into the boost measure registers</long_desc>
		</bitfield>
	</reg>
	<reg name="EMBED_CRC_MAP00">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP01">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP02">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP03">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP04">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP05">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP06">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP07">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP08">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP09">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP10">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP11">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP12">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP13">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP14">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP15">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP16">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP17">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP18">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP19">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP20">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP21">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP22">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP23">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP24">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP25">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP26">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP27">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP28">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP29">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP30">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP31">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP32">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP33">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP34">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP35">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP36">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP37">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP38">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP39">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP40">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP41">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP42">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP43">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP44">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP45">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP46">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP47">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP48">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP49">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP50">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP51">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP52">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP53">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP54">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP55">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP56">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP57">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP58">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP59">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP60">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP61">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP62">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
	<reg name="EMBED_CRC_MAP63">
		<long_desc>Bit-mapped CRC exclusion registers for embedded data and startup register scan.  When a bit is set, the register corresponding to that bit is not included in the embedded data crc.</long_desc>
	</reg>
</registers>
</sensor>
